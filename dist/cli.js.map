{"version":3,"file":"cli.js","sources":["../node_modules/commander/lib/error.js","../node_modules/commander/lib/argument.js","../node_modules/commander/lib/help.js","../node_modules/commander/lib/option.js","../node_modules/commander/lib/suggestSimilar.js","../node_modules/commander/lib/command.js","../node_modules/commander/index.js","../node_modules/commander/esm.mjs","../lib/cli.ts"],"sourcesContent":["/**\n * CommanderError class\n */\nclass CommanderError extends Error {\n  /**\n   * Constructs the CommanderError class\n   * @param {number} exitCode suggested exit code which could be used with process.exit\n   * @param {string} code an id string representing the error\n   * @param {string} message human-readable description of the error\n   */\n  constructor(exitCode, code, message) {\n    super(message);\n    // properly capture stack trace in Node.js\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n    this.code = code;\n    this.exitCode = exitCode;\n    this.nestedError = undefined;\n  }\n}\n\n/**\n * InvalidArgumentError class\n */\nclass InvalidArgumentError extends CommanderError {\n  /**\n   * Constructs the InvalidArgumentError class\n   * @param {string} [message] explanation of why argument is invalid\n   */\n  constructor(message) {\n    super(1, 'commander.invalidArgument', message);\n    // properly capture stack trace in Node.js\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n  }\n}\n\nexports.CommanderError = CommanderError;\nexports.InvalidArgumentError = InvalidArgumentError;\n","const { InvalidArgumentError } = require('./error.js');\n\nclass Argument {\n  /**\n   * Initialize a new command argument with the given name and description.\n   * The default is that the argument is required, and you can explicitly\n   * indicate this with <> around the name. Put [] around the name for an optional argument.\n   *\n   * @param {string} name\n   * @param {string} [description]\n   */\n\n  constructor(name, description) {\n    this.description = description || '';\n    this.variadic = false;\n    this.parseArg = undefined;\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.argChoices = undefined;\n\n    switch (name[0]) {\n      case '<': // e.g. <required>\n        this.required = true;\n        this._name = name.slice(1, -1);\n        break;\n      case '[': // e.g. [optional]\n        this.required = false;\n        this._name = name.slice(1, -1);\n        break;\n      default:\n        this.required = true;\n        this._name = name;\n        break;\n    }\n\n    if (this._name.length > 3 && this._name.slice(-3) === '...') {\n      this.variadic = true;\n      this._name = this._name.slice(0, -3);\n    }\n  }\n\n  /**\n   * Return argument name.\n   *\n   * @return {string}\n   */\n\n  name() {\n    return this._name;\n  }\n\n  /**\n   * @package\n   */\n\n  _concatValue(value, previous) {\n    if (previous === this.defaultValue || !Array.isArray(previous)) {\n      return [value];\n    }\n\n    return previous.concat(value);\n  }\n\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {*} value\n   * @param {string} [description]\n   * @return {Argument}\n   */\n\n  default(value, description) {\n    this.defaultValue = value;\n    this.defaultValueDescription = description;\n    return this;\n  }\n\n  /**\n   * Set the custom handler for processing CLI command arguments into argument values.\n   *\n   * @param {Function} [fn]\n   * @return {Argument}\n   */\n\n  argParser(fn) {\n    this.parseArg = fn;\n    return this;\n  }\n\n  /**\n   * Only allow argument value to be one of choices.\n   *\n   * @param {string[]} values\n   * @return {Argument}\n   */\n\n  choices(values) {\n    this.argChoices = values.slice();\n    this.parseArg = (arg, previous) => {\n      if (!this.argChoices.includes(arg)) {\n        throw new InvalidArgumentError(\n          `Allowed choices are ${this.argChoices.join(', ')}.`,\n        );\n      }\n      if (this.variadic) {\n        return this._concatValue(arg, previous);\n      }\n      return arg;\n    };\n    return this;\n  }\n\n  /**\n   * Make argument required.\n   *\n   * @returns {Argument}\n   */\n  argRequired() {\n    this.required = true;\n    return this;\n  }\n\n  /**\n   * Make argument optional.\n   *\n   * @returns {Argument}\n   */\n  argOptional() {\n    this.required = false;\n    return this;\n  }\n}\n\n/**\n * Takes an argument and returns its human readable equivalent for help usage.\n *\n * @param {Argument} arg\n * @return {string}\n * @private\n */\n\nfunction humanReadableArgName(arg) {\n  const nameOutput = arg.name() + (arg.variadic === true ? '...' : '');\n\n  return arg.required ? '<' + nameOutput + '>' : '[' + nameOutput + ']';\n}\n\nexports.Argument = Argument;\nexports.humanReadableArgName = humanReadableArgName;\n","const { humanReadableArgName } = require('./argument.js');\n\n/**\n * TypeScript import types for JSDoc, used by Visual Studio Code IntelliSense and `npm run typescript-checkJS`\n * https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html#import-types\n * @typedef { import(\"./argument.js\").Argument } Argument\n * @typedef { import(\"./command.js\").Command } Command\n * @typedef { import(\"./option.js\").Option } Option\n */\n\n// Although this is a class, methods are static in style to allow override using subclass or just functions.\nclass Help {\n  constructor() {\n    this.helpWidth = undefined;\n    this.sortSubcommands = false;\n    this.sortOptions = false;\n    this.showGlobalOptions = false;\n  }\n\n  /**\n   * Get an array of the visible subcommands. Includes a placeholder for the implicit help command, if there is one.\n   *\n   * @param {Command} cmd\n   * @returns {Command[]}\n   */\n\n  visibleCommands(cmd) {\n    const visibleCommands = cmd.commands.filter((cmd) => !cmd._hidden);\n    const helpCommand = cmd._getHelpCommand();\n    if (helpCommand && !helpCommand._hidden) {\n      visibleCommands.push(helpCommand);\n    }\n    if (this.sortSubcommands) {\n      visibleCommands.sort((a, b) => {\n        // @ts-ignore: because overloaded return type\n        return a.name().localeCompare(b.name());\n      });\n    }\n    return visibleCommands;\n  }\n\n  /**\n   * Compare options for sort.\n   *\n   * @param {Option} a\n   * @param {Option} b\n   * @returns {number}\n   */\n  compareOptions(a, b) {\n    const getSortKey = (option) => {\n      // WYSIWYG for order displayed in help. Short used for comparison if present. No special handling for negated.\n      return option.short\n        ? option.short.replace(/^-/, '')\n        : option.long.replace(/^--/, '');\n    };\n    return getSortKey(a).localeCompare(getSortKey(b));\n  }\n\n  /**\n   * Get an array of the visible options. Includes a placeholder for the implicit help option, if there is one.\n   *\n   * @param {Command} cmd\n   * @returns {Option[]}\n   */\n\n  visibleOptions(cmd) {\n    const visibleOptions = cmd.options.filter((option) => !option.hidden);\n    // Built-in help option.\n    const helpOption = cmd._getHelpOption();\n    if (helpOption && !helpOption.hidden) {\n      // Automatically hide conflicting flags. Bit dubious but a historical behaviour that is convenient for single-command programs.\n      const removeShort = helpOption.short && cmd._findOption(helpOption.short);\n      const removeLong = helpOption.long && cmd._findOption(helpOption.long);\n      if (!removeShort && !removeLong) {\n        visibleOptions.push(helpOption); // no changes needed\n      } else if (helpOption.long && !removeLong) {\n        visibleOptions.push(\n          cmd.createOption(helpOption.long, helpOption.description),\n        );\n      } else if (helpOption.short && !removeShort) {\n        visibleOptions.push(\n          cmd.createOption(helpOption.short, helpOption.description),\n        );\n      }\n    }\n    if (this.sortOptions) {\n      visibleOptions.sort(this.compareOptions);\n    }\n    return visibleOptions;\n  }\n\n  /**\n   * Get an array of the visible global options. (Not including help.)\n   *\n   * @param {Command} cmd\n   * @returns {Option[]}\n   */\n\n  visibleGlobalOptions(cmd) {\n    if (!this.showGlobalOptions) return [];\n\n    const globalOptions = [];\n    for (\n      let ancestorCmd = cmd.parent;\n      ancestorCmd;\n      ancestorCmd = ancestorCmd.parent\n    ) {\n      const visibleOptions = ancestorCmd.options.filter(\n        (option) => !option.hidden,\n      );\n      globalOptions.push(...visibleOptions);\n    }\n    if (this.sortOptions) {\n      globalOptions.sort(this.compareOptions);\n    }\n    return globalOptions;\n  }\n\n  /**\n   * Get an array of the arguments if any have a description.\n   *\n   * @param {Command} cmd\n   * @returns {Argument[]}\n   */\n\n  visibleArguments(cmd) {\n    // Side effect! Apply the legacy descriptions before the arguments are displayed.\n    if (cmd._argsDescription) {\n      cmd.registeredArguments.forEach((argument) => {\n        argument.description =\n          argument.description || cmd._argsDescription[argument.name()] || '';\n      });\n    }\n\n    // If there are any arguments with a description then return all the arguments.\n    if (cmd.registeredArguments.find((argument) => argument.description)) {\n      return cmd.registeredArguments;\n    }\n    return [];\n  }\n\n  /**\n   * Get the command term to show in the list of subcommands.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  subcommandTerm(cmd) {\n    // Legacy. Ignores custom usage string, and nested commands.\n    const args = cmd.registeredArguments\n      .map((arg) => humanReadableArgName(arg))\n      .join(' ');\n    return (\n      cmd._name +\n      (cmd._aliases[0] ? '|' + cmd._aliases[0] : '') +\n      (cmd.options.length ? ' [options]' : '') + // simplistic check for non-help option\n      (args ? ' ' + args : '')\n    );\n  }\n\n  /**\n   * Get the option term to show in the list of options.\n   *\n   * @param {Option} option\n   * @returns {string}\n   */\n\n  optionTerm(option) {\n    return option.flags;\n  }\n\n  /**\n   * Get the argument term to show in the list of arguments.\n   *\n   * @param {Argument} argument\n   * @returns {string}\n   */\n\n  argumentTerm(argument) {\n    return argument.name();\n  }\n\n  /**\n   * Get the longest command term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestSubcommandTermLength(cmd, helper) {\n    return helper.visibleCommands(cmd).reduce((max, command) => {\n      return Math.max(max, helper.subcommandTerm(command).length);\n    }, 0);\n  }\n\n  /**\n   * Get the longest option term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestOptionTermLength(cmd, helper) {\n    return helper.visibleOptions(cmd).reduce((max, option) => {\n      return Math.max(max, helper.optionTerm(option).length);\n    }, 0);\n  }\n\n  /**\n   * Get the longest global option term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestGlobalOptionTermLength(cmd, helper) {\n    return helper.visibleGlobalOptions(cmd).reduce((max, option) => {\n      return Math.max(max, helper.optionTerm(option).length);\n    }, 0);\n  }\n\n  /**\n   * Get the longest argument term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestArgumentTermLength(cmd, helper) {\n    return helper.visibleArguments(cmd).reduce((max, argument) => {\n      return Math.max(max, helper.argumentTerm(argument).length);\n    }, 0);\n  }\n\n  /**\n   * Get the command usage to be displayed at the top of the built-in help.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  commandUsage(cmd) {\n    // Usage\n    let cmdName = cmd._name;\n    if (cmd._aliases[0]) {\n      cmdName = cmdName + '|' + cmd._aliases[0];\n    }\n    let ancestorCmdNames = '';\n    for (\n      let ancestorCmd = cmd.parent;\n      ancestorCmd;\n      ancestorCmd = ancestorCmd.parent\n    ) {\n      ancestorCmdNames = ancestorCmd.name() + ' ' + ancestorCmdNames;\n    }\n    return ancestorCmdNames + cmdName + ' ' + cmd.usage();\n  }\n\n  /**\n   * Get the description for the command.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  commandDescription(cmd) {\n    // @ts-ignore: because overloaded return type\n    return cmd.description();\n  }\n\n  /**\n   * Get the subcommand summary to show in the list of subcommands.\n   * (Fallback to description for backwards compatibility.)\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  subcommandDescription(cmd) {\n    // @ts-ignore: because overloaded return type\n    return cmd.summary() || cmd.description();\n  }\n\n  /**\n   * Get the option description to show in the list of options.\n   *\n   * @param {Option} option\n   * @return {string}\n   */\n\n  optionDescription(option) {\n    const extraInfo = [];\n\n    if (option.argChoices) {\n      extraInfo.push(\n        // use stringify to match the display of the default value\n        `choices: ${option.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`,\n      );\n    }\n    if (option.defaultValue !== undefined) {\n      // default for boolean and negated more for programmer than end user,\n      // but show true/false for boolean option as may be for hand-rolled env or config processing.\n      const showDefault =\n        option.required ||\n        option.optional ||\n        (option.isBoolean() && typeof option.defaultValue === 'boolean');\n      if (showDefault) {\n        extraInfo.push(\n          `default: ${option.defaultValueDescription || JSON.stringify(option.defaultValue)}`,\n        );\n      }\n    }\n    // preset for boolean and negated are more for programmer than end user\n    if (option.presetArg !== undefined && option.optional) {\n      extraInfo.push(`preset: ${JSON.stringify(option.presetArg)}`);\n    }\n    if (option.envVar !== undefined) {\n      extraInfo.push(`env: ${option.envVar}`);\n    }\n    if (extraInfo.length > 0) {\n      return `${option.description} (${extraInfo.join(', ')})`;\n    }\n\n    return option.description;\n  }\n\n  /**\n   * Get the argument description to show in the list of arguments.\n   *\n   * @param {Argument} argument\n   * @return {string}\n   */\n\n  argumentDescription(argument) {\n    const extraInfo = [];\n    if (argument.argChoices) {\n      extraInfo.push(\n        // use stringify to match the display of the default value\n        `choices: ${argument.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`,\n      );\n    }\n    if (argument.defaultValue !== undefined) {\n      extraInfo.push(\n        `default: ${argument.defaultValueDescription || JSON.stringify(argument.defaultValue)}`,\n      );\n    }\n    if (extraInfo.length > 0) {\n      const extraDescripton = `(${extraInfo.join(', ')})`;\n      if (argument.description) {\n        return `${argument.description} ${extraDescripton}`;\n      }\n      return extraDescripton;\n    }\n    return argument.description;\n  }\n\n  /**\n   * Generate the built-in help text.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {string}\n   */\n\n  formatHelp(cmd, helper) {\n    const termWidth = helper.padWidth(cmd, helper);\n    const helpWidth = helper.helpWidth || 80;\n    const itemIndentWidth = 2;\n    const itemSeparatorWidth = 2; // between term and description\n    function formatItem(term, description) {\n      if (description) {\n        const fullText = `${term.padEnd(termWidth + itemSeparatorWidth)}${description}`;\n        return helper.wrap(\n          fullText,\n          helpWidth - itemIndentWidth,\n          termWidth + itemSeparatorWidth,\n        );\n      }\n      return term;\n    }\n    function formatList(textArray) {\n      return textArray.join('\\n').replace(/^/gm, ' '.repeat(itemIndentWidth));\n    }\n\n    // Usage\n    let output = [`Usage: ${helper.commandUsage(cmd)}`, ''];\n\n    // Description\n    const commandDescription = helper.commandDescription(cmd);\n    if (commandDescription.length > 0) {\n      output = output.concat([\n        helper.wrap(commandDescription, helpWidth, 0),\n        '',\n      ]);\n    }\n\n    // Arguments\n    const argumentList = helper.visibleArguments(cmd).map((argument) => {\n      return formatItem(\n        helper.argumentTerm(argument),\n        helper.argumentDescription(argument),\n      );\n    });\n    if (argumentList.length > 0) {\n      output = output.concat(['Arguments:', formatList(argumentList), '']);\n    }\n\n    // Options\n    const optionList = helper.visibleOptions(cmd).map((option) => {\n      return formatItem(\n        helper.optionTerm(option),\n        helper.optionDescription(option),\n      );\n    });\n    if (optionList.length > 0) {\n      output = output.concat(['Options:', formatList(optionList), '']);\n    }\n\n    if (this.showGlobalOptions) {\n      const globalOptionList = helper\n        .visibleGlobalOptions(cmd)\n        .map((option) => {\n          return formatItem(\n            helper.optionTerm(option),\n            helper.optionDescription(option),\n          );\n        });\n      if (globalOptionList.length > 0) {\n        output = output.concat([\n          'Global Options:',\n          formatList(globalOptionList),\n          '',\n        ]);\n      }\n    }\n\n    // Commands\n    const commandList = helper.visibleCommands(cmd).map((cmd) => {\n      return formatItem(\n        helper.subcommandTerm(cmd),\n        helper.subcommandDescription(cmd),\n      );\n    });\n    if (commandList.length > 0) {\n      output = output.concat(['Commands:', formatList(commandList), '']);\n    }\n\n    return output.join('\\n');\n  }\n\n  /**\n   * Calculate the pad width from the maximum term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  padWidth(cmd, helper) {\n    return Math.max(\n      helper.longestOptionTermLength(cmd, helper),\n      helper.longestGlobalOptionTermLength(cmd, helper),\n      helper.longestSubcommandTermLength(cmd, helper),\n      helper.longestArgumentTermLength(cmd, helper),\n    );\n  }\n\n  /**\n   * Wrap the given string to width characters per line, with lines after the first indented.\n   * Do not wrap if insufficient room for wrapping (minColumnWidth), or string is manually formatted.\n   *\n   * @param {string} str\n   * @param {number} width\n   * @param {number} indent\n   * @param {number} [minColumnWidth=40]\n   * @return {string}\n   *\n   */\n\n  wrap(str, width, indent, minColumnWidth = 40) {\n    // Full \\s characters, minus the linefeeds.\n    const indents =\n      ' \\\\f\\\\t\\\\v\\u00a0\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff';\n    // Detect manually wrapped and indented strings by searching for line break followed by spaces.\n    const manualIndent = new RegExp(`[\\\\n][${indents}]+`);\n    if (str.match(manualIndent)) return str;\n    // Do not wrap if not enough room for a wrapped column of text (as could end up with a word per line).\n    const columnWidth = width - indent;\n    if (columnWidth < minColumnWidth) return str;\n\n    const leadingStr = str.slice(0, indent);\n    const columnText = str.slice(indent).replace('\\r\\n', '\\n');\n    const indentString = ' '.repeat(indent);\n    const zeroWidthSpace = '\\u200B';\n    const breaks = `\\\\s${zeroWidthSpace}`;\n    // Match line end (so empty lines don't collapse),\n    // or as much text as will fit in column, or excess text up to first break.\n    const regex = new RegExp(\n      `\\n|.{1,${columnWidth - 1}}([${breaks}]|$)|[^${breaks}]+?([${breaks}]|$)`,\n      'g',\n    );\n    const lines = columnText.match(regex) || [];\n    return (\n      leadingStr +\n      lines\n        .map((line, i) => {\n          if (line === '\\n') return ''; // preserve empty lines\n          return (i > 0 ? indentString : '') + line.trimEnd();\n        })\n        .join('\\n')\n    );\n  }\n}\n\nexports.Help = Help;\n","const { InvalidArgumentError } = require('./error.js');\n\nclass Option {\n  /**\n   * Initialize a new `Option` with the given `flags` and `description`.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   */\n\n  constructor(flags, description) {\n    this.flags = flags;\n    this.description = description || '';\n\n    this.required = flags.includes('<'); // A value must be supplied when the option is specified.\n    this.optional = flags.includes('['); // A value is optional when the option is specified.\n    // variadic test ignores <value,...> et al which might be used to describe custom splitting of single argument\n    this.variadic = /\\w\\.\\.\\.[>\\]]$/.test(flags); // The option can take multiple values.\n    this.mandatory = false; // The option must have a value after parsing, which usually means it must be specified on command line.\n    const optionFlags = splitOptionFlags(flags);\n    this.short = optionFlags.shortFlag;\n    this.long = optionFlags.longFlag;\n    this.negate = false;\n    if (this.long) {\n      this.negate = this.long.startsWith('--no-');\n    }\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.presetArg = undefined;\n    this.envVar = undefined;\n    this.parseArg = undefined;\n    this.hidden = false;\n    this.argChoices = undefined;\n    this.conflictsWith = [];\n    this.implied = undefined;\n  }\n\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {*} value\n   * @param {string} [description]\n   * @return {Option}\n   */\n\n  default(value, description) {\n    this.defaultValue = value;\n    this.defaultValueDescription = description;\n    return this;\n  }\n\n  /**\n   * Preset to use when option used without option-argument, especially optional but also boolean and negated.\n   * The custom processing (parseArg) is called.\n   *\n   * @example\n   * new Option('--color').default('GREYSCALE').preset('RGB');\n   * new Option('--donate [amount]').preset('20').argParser(parseFloat);\n   *\n   * @param {*} arg\n   * @return {Option}\n   */\n\n  preset(arg) {\n    this.presetArg = arg;\n    return this;\n  }\n\n  /**\n   * Add option name(s) that conflict with this option.\n   * An error will be displayed if conflicting options are found during parsing.\n   *\n   * @example\n   * new Option('--rgb').conflicts('cmyk');\n   * new Option('--js').conflicts(['ts', 'jsx']);\n   *\n   * @param {(string | string[])} names\n   * @return {Option}\n   */\n\n  conflicts(names) {\n    this.conflictsWith = this.conflictsWith.concat(names);\n    return this;\n  }\n\n  /**\n   * Specify implied option values for when this option is set and the implied options are not.\n   *\n   * The custom processing (parseArg) is not called on the implied values.\n   *\n   * @example\n   * program\n   *   .addOption(new Option('--log', 'write logging information to file'))\n   *   .addOption(new Option('--trace', 'log extra details').implies({ log: 'trace.txt' }));\n   *\n   * @param {object} impliedOptionValues\n   * @return {Option}\n   */\n  implies(impliedOptionValues) {\n    let newImplied = impliedOptionValues;\n    if (typeof impliedOptionValues === 'string') {\n      // string is not documented, but easy mistake and we can do what user probably intended.\n      newImplied = { [impliedOptionValues]: true };\n    }\n    this.implied = Object.assign(this.implied || {}, newImplied);\n    return this;\n  }\n\n  /**\n   * Set environment variable to check for option value.\n   *\n   * An environment variable is only used if when processed the current option value is\n   * undefined, or the source of the current value is 'default' or 'config' or 'env'.\n   *\n   * @param {string} name\n   * @return {Option}\n   */\n\n  env(name) {\n    this.envVar = name;\n    return this;\n  }\n\n  /**\n   * Set the custom handler for processing CLI option arguments into option values.\n   *\n   * @param {Function} [fn]\n   * @return {Option}\n   */\n\n  argParser(fn) {\n    this.parseArg = fn;\n    return this;\n  }\n\n  /**\n   * Whether the option is mandatory and must have a value after parsing.\n   *\n   * @param {boolean} [mandatory=true]\n   * @return {Option}\n   */\n\n  makeOptionMandatory(mandatory = true) {\n    this.mandatory = !!mandatory;\n    return this;\n  }\n\n  /**\n   * Hide option in help.\n   *\n   * @param {boolean} [hide=true]\n   * @return {Option}\n   */\n\n  hideHelp(hide = true) {\n    this.hidden = !!hide;\n    return this;\n  }\n\n  /**\n   * @package\n   */\n\n  _concatValue(value, previous) {\n    if (previous === this.defaultValue || !Array.isArray(previous)) {\n      return [value];\n    }\n\n    return previous.concat(value);\n  }\n\n  /**\n   * Only allow option value to be one of choices.\n   *\n   * @param {string[]} values\n   * @return {Option}\n   */\n\n  choices(values) {\n    this.argChoices = values.slice();\n    this.parseArg = (arg, previous) => {\n      if (!this.argChoices.includes(arg)) {\n        throw new InvalidArgumentError(\n          `Allowed choices are ${this.argChoices.join(', ')}.`,\n        );\n      }\n      if (this.variadic) {\n        return this._concatValue(arg, previous);\n      }\n      return arg;\n    };\n    return this;\n  }\n\n  /**\n   * Return option name.\n   *\n   * @return {string}\n   */\n\n  name() {\n    if (this.long) {\n      return this.long.replace(/^--/, '');\n    }\n    return this.short.replace(/^-/, '');\n  }\n\n  /**\n   * Return option name, in a camelcase format that can be used\n   * as a object attribute key.\n   *\n   * @return {string}\n   */\n\n  attributeName() {\n    return camelcase(this.name().replace(/^no-/, ''));\n  }\n\n  /**\n   * Check if `arg` matches the short or long flag.\n   *\n   * @param {string} arg\n   * @return {boolean}\n   * @package\n   */\n\n  is(arg) {\n    return this.short === arg || this.long === arg;\n  }\n\n  /**\n   * Return whether a boolean option.\n   *\n   * Options are one of boolean, negated, required argument, or optional argument.\n   *\n   * @return {boolean}\n   * @package\n   */\n\n  isBoolean() {\n    return !this.required && !this.optional && !this.negate;\n  }\n}\n\n/**\n * This class is to make it easier to work with dual options, without changing the existing\n * implementation. We support separate dual options for separate positive and negative options,\n * like `--build` and `--no-build`, which share a single option value. This works nicely for some\n * use cases, but is tricky for others where we want separate behaviours despite\n * the single shared option value.\n */\nclass DualOptions {\n  /**\n   * @param {Option[]} options\n   */\n  constructor(options) {\n    this.positiveOptions = new Map();\n    this.negativeOptions = new Map();\n    this.dualOptions = new Set();\n    options.forEach((option) => {\n      if (option.negate) {\n        this.negativeOptions.set(option.attributeName(), option);\n      } else {\n        this.positiveOptions.set(option.attributeName(), option);\n      }\n    });\n    this.negativeOptions.forEach((value, key) => {\n      if (this.positiveOptions.has(key)) {\n        this.dualOptions.add(key);\n      }\n    });\n  }\n\n  /**\n   * Did the value come from the option, and not from possible matching dual option?\n   *\n   * @param {*} value\n   * @param {Option} option\n   * @returns {boolean}\n   */\n  valueFromOption(value, option) {\n    const optionKey = option.attributeName();\n    if (!this.dualOptions.has(optionKey)) return true;\n\n    // Use the value to deduce if (probably) came from the option.\n    const preset = this.negativeOptions.get(optionKey).presetArg;\n    const negativeValue = preset !== undefined ? preset : false;\n    return option.negate === (negativeValue === value);\n  }\n}\n\n/**\n * Convert string from kebab-case to camelCase.\n *\n * @param {string} str\n * @return {string}\n * @private\n */\n\nfunction camelcase(str) {\n  return str.split('-').reduce((str, word) => {\n    return str + word[0].toUpperCase() + word.slice(1);\n  });\n}\n\n/**\n * Split the short and long flag out of something like '-m,--mixed <value>'\n *\n * @private\n */\n\nfunction splitOptionFlags(flags) {\n  let shortFlag;\n  let longFlag;\n  // Use original very loose parsing to maintain backwards compatibility for now,\n  // which allowed for example unintended `-sw, --short-word` [sic].\n  const flagParts = flags.split(/[ |,]+/);\n  if (flagParts.length > 1 && !/^[[<]/.test(flagParts[1]))\n    shortFlag = flagParts.shift();\n  longFlag = flagParts.shift();\n  // Add support for lone short flag without significantly changing parsing!\n  if (!shortFlag && /^-[^-]$/.test(longFlag)) {\n    shortFlag = longFlag;\n    longFlag = undefined;\n  }\n  return { shortFlag, longFlag };\n}\n\nexports.Option = Option;\nexports.DualOptions = DualOptions;\n","const maxDistance = 3;\n\nfunction editDistance(a, b) {\n  // https://en.wikipedia.org/wiki/Damerau–Levenshtein_distance\n  // Calculating optimal string alignment distance, no substring is edited more than once.\n  // (Simple implementation.)\n\n  // Quick early exit, return worst case.\n  if (Math.abs(a.length - b.length) > maxDistance)\n    return Math.max(a.length, b.length);\n\n  // distance between prefix substrings of a and b\n  const d = [];\n\n  // pure deletions turn a into empty string\n  for (let i = 0; i <= a.length; i++) {\n    d[i] = [i];\n  }\n  // pure insertions turn empty string into b\n  for (let j = 0; j <= b.length; j++) {\n    d[0][j] = j;\n  }\n\n  // fill matrix\n  for (let j = 1; j <= b.length; j++) {\n    for (let i = 1; i <= a.length; i++) {\n      let cost = 1;\n      if (a[i - 1] === b[j - 1]) {\n        cost = 0;\n      } else {\n        cost = 1;\n      }\n      d[i][j] = Math.min(\n        d[i - 1][j] + 1, // deletion\n        d[i][j - 1] + 1, // insertion\n        d[i - 1][j - 1] + cost, // substitution\n      );\n      // transposition\n      if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n        d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + 1);\n      }\n    }\n  }\n\n  return d[a.length][b.length];\n}\n\n/**\n * Find close matches, restricted to same number of edits.\n *\n * @param {string} word\n * @param {string[]} candidates\n * @returns {string}\n */\n\nfunction suggestSimilar(word, candidates) {\n  if (!candidates || candidates.length === 0) return '';\n  // remove possible duplicates\n  candidates = Array.from(new Set(candidates));\n\n  const searchingOptions = word.startsWith('--');\n  if (searchingOptions) {\n    word = word.slice(2);\n    candidates = candidates.map((candidate) => candidate.slice(2));\n  }\n\n  let similar = [];\n  let bestDistance = maxDistance;\n  const minSimilarity = 0.4;\n  candidates.forEach((candidate) => {\n    if (candidate.length <= 1) return; // no one character guesses\n\n    const distance = editDistance(word, candidate);\n    const length = Math.max(word.length, candidate.length);\n    const similarity = (length - distance) / length;\n    if (similarity > minSimilarity) {\n      if (distance < bestDistance) {\n        // better edit distance, throw away previous worse matches\n        bestDistance = distance;\n        similar = [candidate];\n      } else if (distance === bestDistance) {\n        similar.push(candidate);\n      }\n    }\n  });\n\n  similar.sort((a, b) => a.localeCompare(b));\n  if (searchingOptions) {\n    similar = similar.map((candidate) => `--${candidate}`);\n  }\n\n  if (similar.length > 1) {\n    return `\\n(Did you mean one of ${similar.join(', ')}?)`;\n  }\n  if (similar.length === 1) {\n    return `\\n(Did you mean ${similar[0]}?)`;\n  }\n  return '';\n}\n\nexports.suggestSimilar = suggestSimilar;\n","const EventEmitter = require('node:events').EventEmitter;\nconst childProcess = require('node:child_process');\nconst path = require('node:path');\nconst fs = require('node:fs');\nconst process = require('node:process');\n\nconst { Argument, humanReadableArgName } = require('./argument.js');\nconst { CommanderError } = require('./error.js');\nconst { Help } = require('./help.js');\nconst { Option, DualOptions } = require('./option.js');\nconst { suggestSimilar } = require('./suggestSimilar');\n\nclass Command extends EventEmitter {\n  /**\n   * Initialize a new `Command`.\n   *\n   * @param {string} [name]\n   */\n\n  constructor(name) {\n    super();\n    /** @type {Command[]} */\n    this.commands = [];\n    /** @type {Option[]} */\n    this.options = [];\n    this.parent = null;\n    this._allowUnknownOption = false;\n    this._allowExcessArguments = true;\n    /** @type {Argument[]} */\n    this.registeredArguments = [];\n    this._args = this.registeredArguments; // deprecated old name\n    /** @type {string[]} */\n    this.args = []; // cli args with options removed\n    this.rawArgs = [];\n    this.processedArgs = []; // like .args but after custom processing and collecting variadic\n    this._scriptPath = null;\n    this._name = name || '';\n    this._optionValues = {};\n    this._optionValueSources = {}; // default, env, cli etc\n    this._storeOptionsAsProperties = false;\n    this._actionHandler = null;\n    this._executableHandler = false;\n    this._executableFile = null; // custom name for executable\n    this._executableDir = null; // custom search directory for subcommands\n    this._defaultCommandName = null;\n    this._exitCallback = null;\n    this._aliases = [];\n    this._combineFlagAndOptionalValue = true;\n    this._description = '';\n    this._summary = '';\n    this._argsDescription = undefined; // legacy\n    this._enablePositionalOptions = false;\n    this._passThroughOptions = false;\n    this._lifeCycleHooks = {}; // a hash of arrays\n    /** @type {(boolean | string)} */\n    this._showHelpAfterError = false;\n    this._showSuggestionAfterError = true;\n\n    // see .configureOutput() for docs\n    this._outputConfiguration = {\n      writeOut: (str) => process.stdout.write(str),\n      writeErr: (str) => process.stderr.write(str),\n      getOutHelpWidth: () =>\n        process.stdout.isTTY ? process.stdout.columns : undefined,\n      getErrHelpWidth: () =>\n        process.stderr.isTTY ? process.stderr.columns : undefined,\n      outputError: (str, write) => write(str),\n    };\n\n    this._hidden = false;\n    /** @type {(Option | null | undefined)} */\n    this._helpOption = undefined; // Lazy created on demand. May be null if help option is disabled.\n    this._addImplicitHelpCommand = undefined; // undecided whether true or false yet, not inherited\n    /** @type {Command} */\n    this._helpCommand = undefined; // lazy initialised, inherited\n    this._helpConfiguration = {};\n  }\n\n  /**\n   * Copy settings that are useful to have in common across root command and subcommands.\n   *\n   * (Used internally when adding a command using `.command()` so subcommands inherit parent settings.)\n   *\n   * @param {Command} sourceCommand\n   * @return {Command} `this` command for chaining\n   */\n  copyInheritedSettings(sourceCommand) {\n    this._outputConfiguration = sourceCommand._outputConfiguration;\n    this._helpOption = sourceCommand._helpOption;\n    this._helpCommand = sourceCommand._helpCommand;\n    this._helpConfiguration = sourceCommand._helpConfiguration;\n    this._exitCallback = sourceCommand._exitCallback;\n    this._storeOptionsAsProperties = sourceCommand._storeOptionsAsProperties;\n    this._combineFlagAndOptionalValue =\n      sourceCommand._combineFlagAndOptionalValue;\n    this._allowExcessArguments = sourceCommand._allowExcessArguments;\n    this._enablePositionalOptions = sourceCommand._enablePositionalOptions;\n    this._showHelpAfterError = sourceCommand._showHelpAfterError;\n    this._showSuggestionAfterError = sourceCommand._showSuggestionAfterError;\n\n    return this;\n  }\n\n  /**\n   * @returns {Command[]}\n   * @private\n   */\n\n  _getCommandAndAncestors() {\n    const result = [];\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    for (let command = this; command; command = command.parent) {\n      result.push(command);\n    }\n    return result;\n  }\n\n  /**\n   * Define a command.\n   *\n   * There are two styles of command: pay attention to where to put the description.\n   *\n   * @example\n   * // Command implemented using action handler (description is supplied separately to `.command`)\n   * program\n   *   .command('clone <source> [destination]')\n   *   .description('clone a repository into a newly created directory')\n   *   .action((source, destination) => {\n   *     console.log('clone command called');\n   *   });\n   *\n   * // Command implemented using separate executable file (description is second parameter to `.command`)\n   * program\n   *   .command('start <service>', 'start named service')\n   *   .command('stop [service]', 'stop named service, or all if no name supplied');\n   *\n   * @param {string} nameAndArgs - command name and arguments, args are `<required>` or `[optional]` and last may also be `variadic...`\n   * @param {(object | string)} [actionOptsOrExecDesc] - configuration options (for action), or description (for executable)\n   * @param {object} [execOpts] - configuration options (for executable)\n   * @return {Command} returns new command for action handler, or `this` for executable command\n   */\n\n  command(nameAndArgs, actionOptsOrExecDesc, execOpts) {\n    let desc = actionOptsOrExecDesc;\n    let opts = execOpts;\n    if (typeof desc === 'object' && desc !== null) {\n      opts = desc;\n      desc = null;\n    }\n    opts = opts || {};\n    const [, name, args] = nameAndArgs.match(/([^ ]+) *(.*)/);\n\n    const cmd = this.createCommand(name);\n    if (desc) {\n      cmd.description(desc);\n      cmd._executableHandler = true;\n    }\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\n    cmd._hidden = !!(opts.noHelp || opts.hidden); // noHelp is deprecated old name for hidden\n    cmd._executableFile = opts.executableFile || null; // Custom name for executable file, set missing to null to match constructor\n    if (args) cmd.arguments(args);\n    this._registerCommand(cmd);\n    cmd.parent = this;\n    cmd.copyInheritedSettings(this);\n\n    if (desc) return this;\n    return cmd;\n  }\n\n  /**\n   * Factory routine to create a new unattached command.\n   *\n   * See .command() for creating an attached subcommand, which uses this routine to\n   * create the command. You can override createCommand to customise subcommands.\n   *\n   * @param {string} [name]\n   * @return {Command} new command\n   */\n\n  createCommand(name) {\n    return new Command(name);\n  }\n\n  /**\n   * You can customise the help with a subclass of Help by overriding createHelp,\n   * or by overriding Help properties using configureHelp().\n   *\n   * @return {Help}\n   */\n\n  createHelp() {\n    return Object.assign(new Help(), this.configureHelp());\n  }\n\n  /**\n   * You can customise the help by overriding Help properties using configureHelp(),\n   * or with a subclass of Help by overriding createHelp().\n   *\n   * @param {object} [configuration] - configuration options\n   * @return {(Command | object)} `this` command for chaining, or stored configuration\n   */\n\n  configureHelp(configuration) {\n    if (configuration === undefined) return this._helpConfiguration;\n\n    this._helpConfiguration = configuration;\n    return this;\n  }\n\n  /**\n   * The default output goes to stdout and stderr. You can customise this for special\n   * applications. You can also customise the display of errors by overriding outputError.\n   *\n   * The configuration properties are all functions:\n   *\n   *     // functions to change where being written, stdout and stderr\n   *     writeOut(str)\n   *     writeErr(str)\n   *     // matching functions to specify width for wrapping help\n   *     getOutHelpWidth()\n   *     getErrHelpWidth()\n   *     // functions based on what is being written out\n   *     outputError(str, write) // used for displaying errors, and not used for displaying help\n   *\n   * @param {object} [configuration] - configuration options\n   * @return {(Command | object)} `this` command for chaining, or stored configuration\n   */\n\n  configureOutput(configuration) {\n    if (configuration === undefined) return this._outputConfiguration;\n\n    Object.assign(this._outputConfiguration, configuration);\n    return this;\n  }\n\n  /**\n   * Display the help or a custom message after an error occurs.\n   *\n   * @param {(boolean|string)} [displayHelp]\n   * @return {Command} `this` command for chaining\n   */\n  showHelpAfterError(displayHelp = true) {\n    if (typeof displayHelp !== 'string') displayHelp = !!displayHelp;\n    this._showHelpAfterError = displayHelp;\n    return this;\n  }\n\n  /**\n   * Display suggestion of similar commands for unknown commands, or options for unknown options.\n   *\n   * @param {boolean} [displaySuggestion]\n   * @return {Command} `this` command for chaining\n   */\n  showSuggestionAfterError(displaySuggestion = true) {\n    this._showSuggestionAfterError = !!displaySuggestion;\n    return this;\n  }\n\n  /**\n   * Add a prepared subcommand.\n   *\n   * See .command() for creating an attached subcommand which inherits settings from its parent.\n   *\n   * @param {Command} cmd - new subcommand\n   * @param {object} [opts] - configuration options\n   * @return {Command} `this` command for chaining\n   */\n\n  addCommand(cmd, opts) {\n    if (!cmd._name) {\n      throw new Error(`Command passed to .addCommand() must have a name\n- specify the name in Command constructor or using .name()`);\n    }\n\n    opts = opts || {};\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\n    if (opts.noHelp || opts.hidden) cmd._hidden = true; // modifying passed command due to existing implementation\n\n    this._registerCommand(cmd);\n    cmd.parent = this;\n    cmd._checkForBrokenPassThrough();\n\n    return this;\n  }\n\n  /**\n   * Factory routine to create a new unattached argument.\n   *\n   * See .argument() for creating an attached argument, which uses this routine to\n   * create the argument. You can override createArgument to return a custom argument.\n   *\n   * @param {string} name\n   * @param {string} [description]\n   * @return {Argument} new argument\n   */\n\n  createArgument(name, description) {\n    return new Argument(name, description);\n  }\n\n  /**\n   * Define argument syntax for command.\n   *\n   * The default is that the argument is required, and you can explicitly\n   * indicate this with <> around the name. Put [] around the name for an optional argument.\n   *\n   * @example\n   * program.argument('<input-file>');\n   * program.argument('[output-file]');\n   *\n   * @param {string} name\n   * @param {string} [description]\n   * @param {(Function|*)} [fn] - custom argument processing function\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n  argument(name, description, fn, defaultValue) {\n    const argument = this.createArgument(name, description);\n    if (typeof fn === 'function') {\n      argument.default(defaultValue).argParser(fn);\n    } else {\n      argument.default(fn);\n    }\n    this.addArgument(argument);\n    return this;\n  }\n\n  /**\n   * Define argument syntax for command, adding multiple at once (without descriptions).\n   *\n   * See also .argument().\n   *\n   * @example\n   * program.arguments('<cmd> [env]');\n   *\n   * @param {string} names\n   * @return {Command} `this` command for chaining\n   */\n\n  arguments(names) {\n    names\n      .trim()\n      .split(/ +/)\n      .forEach((detail) => {\n        this.argument(detail);\n      });\n    return this;\n  }\n\n  /**\n   * Define argument syntax for command, adding a prepared argument.\n   *\n   * @param {Argument} argument\n   * @return {Command} `this` command for chaining\n   */\n  addArgument(argument) {\n    const previousArgument = this.registeredArguments.slice(-1)[0];\n    if (previousArgument && previousArgument.variadic) {\n      throw new Error(\n        `only the last argument can be variadic '${previousArgument.name()}'`,\n      );\n    }\n    if (\n      argument.required &&\n      argument.defaultValue !== undefined &&\n      argument.parseArg === undefined\n    ) {\n      throw new Error(\n        `a default value for a required argument is never used: '${argument.name()}'`,\n      );\n    }\n    this.registeredArguments.push(argument);\n    return this;\n  }\n\n  /**\n   * Customise or override default help command. By default a help command is automatically added if your command has subcommands.\n   *\n   * @example\n   *    program.helpCommand('help [cmd]');\n   *    program.helpCommand('help [cmd]', 'show help');\n   *    program.helpCommand(false); // suppress default help command\n   *    program.helpCommand(true); // add help command even if no subcommands\n   *\n   * @param {string|boolean} enableOrNameAndArgs - enable with custom name and/or arguments, or boolean to override whether added\n   * @param {string} [description] - custom description\n   * @return {Command} `this` command for chaining\n   */\n\n  helpCommand(enableOrNameAndArgs, description) {\n    if (typeof enableOrNameAndArgs === 'boolean') {\n      this._addImplicitHelpCommand = enableOrNameAndArgs;\n      return this;\n    }\n\n    enableOrNameAndArgs = enableOrNameAndArgs ?? 'help [command]';\n    const [, helpName, helpArgs] = enableOrNameAndArgs.match(/([^ ]+) *(.*)/);\n    const helpDescription = description ?? 'display help for command';\n\n    const helpCommand = this.createCommand(helpName);\n    helpCommand.helpOption(false);\n    if (helpArgs) helpCommand.arguments(helpArgs);\n    if (helpDescription) helpCommand.description(helpDescription);\n\n    this._addImplicitHelpCommand = true;\n    this._helpCommand = helpCommand;\n\n    return this;\n  }\n\n  /**\n   * Add prepared custom help command.\n   *\n   * @param {(Command|string|boolean)} helpCommand - custom help command, or deprecated enableOrNameAndArgs as for `.helpCommand()`\n   * @param {string} [deprecatedDescription] - deprecated custom description used with custom name only\n   * @return {Command} `this` command for chaining\n   */\n  addHelpCommand(helpCommand, deprecatedDescription) {\n    // If not passed an object, call through to helpCommand for backwards compatibility,\n    // as addHelpCommand was originally used like helpCommand is now.\n    if (typeof helpCommand !== 'object') {\n      this.helpCommand(helpCommand, deprecatedDescription);\n      return this;\n    }\n\n    this._addImplicitHelpCommand = true;\n    this._helpCommand = helpCommand;\n    return this;\n  }\n\n  /**\n   * Lazy create help command.\n   *\n   * @return {(Command|null)}\n   * @package\n   */\n  _getHelpCommand() {\n    const hasImplicitHelpCommand =\n      this._addImplicitHelpCommand ??\n      (this.commands.length &&\n        !this._actionHandler &&\n        !this._findCommand('help'));\n\n    if (hasImplicitHelpCommand) {\n      if (this._helpCommand === undefined) {\n        this.helpCommand(undefined, undefined); // use default name and description\n      }\n      return this._helpCommand;\n    }\n    return null;\n  }\n\n  /**\n   * Add hook for life cycle event.\n   *\n   * @param {string} event\n   * @param {Function} listener\n   * @return {Command} `this` command for chaining\n   */\n\n  hook(event, listener) {\n    const allowedValues = ['preSubcommand', 'preAction', 'postAction'];\n    if (!allowedValues.includes(event)) {\n      throw new Error(`Unexpected value for event passed to hook : '${event}'.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n    }\n    if (this._lifeCycleHooks[event]) {\n      this._lifeCycleHooks[event].push(listener);\n    } else {\n      this._lifeCycleHooks[event] = [listener];\n    }\n    return this;\n  }\n\n  /**\n   * Register callback to use as replacement for calling process.exit.\n   *\n   * @param {Function} [fn] optional callback which will be passed a CommanderError, defaults to throwing\n   * @return {Command} `this` command for chaining\n   */\n\n  exitOverride(fn) {\n    if (fn) {\n      this._exitCallback = fn;\n    } else {\n      this._exitCallback = (err) => {\n        if (err.code !== 'commander.executeSubCommandAsync') {\n          throw err;\n        } else {\n          // Async callback from spawn events, not useful to throw.\n        }\n      };\n    }\n    return this;\n  }\n\n  /**\n   * Call process.exit, and _exitCallback if defined.\n   *\n   * @param {number} exitCode exit code for using with process.exit\n   * @param {string} code an id string representing the error\n   * @param {string} message human-readable description of the error\n   * @return never\n   * @private\n   */\n\n  _exit(exitCode, code, message) {\n    if (this._exitCallback) {\n      this._exitCallback(new CommanderError(exitCode, code, message));\n      // Expecting this line is not reached.\n    }\n    process.exit(exitCode);\n  }\n\n  /**\n   * Register callback `fn` for the command.\n   *\n   * @example\n   * program\n   *   .command('serve')\n   *   .description('start service')\n   *   .action(function() {\n   *      // do work here\n   *   });\n   *\n   * @param {Function} fn\n   * @return {Command} `this` command for chaining\n   */\n\n  action(fn) {\n    const listener = (args) => {\n      // The .action callback takes an extra parameter which is the command or options.\n      const expectedArgsCount = this.registeredArguments.length;\n      const actionArgs = args.slice(0, expectedArgsCount);\n      if (this._storeOptionsAsProperties) {\n        actionArgs[expectedArgsCount] = this; // backwards compatible \"options\"\n      } else {\n        actionArgs[expectedArgsCount] = this.opts();\n      }\n      actionArgs.push(this);\n\n      return fn.apply(this, actionArgs);\n    };\n    this._actionHandler = listener;\n    return this;\n  }\n\n  /**\n   * Factory routine to create a new unattached option.\n   *\n   * See .option() for creating an attached option, which uses this routine to\n   * create the option. You can override createOption to return a custom option.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @return {Option} new option\n   */\n\n  createOption(flags, description) {\n    return new Option(flags, description);\n  }\n\n  /**\n   * Wrap parseArgs to catch 'commander.invalidArgument'.\n   *\n   * @param {(Option | Argument)} target\n   * @param {string} value\n   * @param {*} previous\n   * @param {string} invalidArgumentMessage\n   * @private\n   */\n\n  _callParseArg(target, value, previous, invalidArgumentMessage) {\n    try {\n      return target.parseArg(value, previous);\n    } catch (err) {\n      if (err.code === 'commander.invalidArgument') {\n        const message = `${invalidArgumentMessage} ${err.message}`;\n        this.error(message, { exitCode: err.exitCode, code: err.code });\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * Check for option flag conflicts.\n   * Register option if no conflicts found, or throw on conflict.\n   *\n   * @param {Option} option\n   * @private\n   */\n\n  _registerOption(option) {\n    const matchingOption =\n      (option.short && this._findOption(option.short)) ||\n      (option.long && this._findOption(option.long));\n    if (matchingOption) {\n      const matchingFlag =\n        option.long && this._findOption(option.long)\n          ? option.long\n          : option.short;\n      throw new Error(`Cannot add option '${option.flags}'${this._name && ` to command '${this._name}'`} due to conflicting flag '${matchingFlag}'\n-  already used by option '${matchingOption.flags}'`);\n    }\n\n    this.options.push(option);\n  }\n\n  /**\n   * Check for command name and alias conflicts with existing commands.\n   * Register command if no conflicts found, or throw on conflict.\n   *\n   * @param {Command} command\n   * @private\n   */\n\n  _registerCommand(command) {\n    const knownBy = (cmd) => {\n      return [cmd.name()].concat(cmd.aliases());\n    };\n\n    const alreadyUsed = knownBy(command).find((name) =>\n      this._findCommand(name),\n    );\n    if (alreadyUsed) {\n      const existingCmd = knownBy(this._findCommand(alreadyUsed)).join('|');\n      const newCmd = knownBy(command).join('|');\n      throw new Error(\n        `cannot add command '${newCmd}' as already have command '${existingCmd}'`,\n      );\n    }\n\n    this.commands.push(command);\n  }\n\n  /**\n   * Add an option.\n   *\n   * @param {Option} option\n   * @return {Command} `this` command for chaining\n   */\n  addOption(option) {\n    this._registerOption(option);\n\n    const oname = option.name();\n    const name = option.attributeName();\n\n    // store default value\n    if (option.negate) {\n      // --no-foo is special and defaults foo to true, unless a --foo option is already defined\n      const positiveLongFlag = option.long.replace(/^--no-/, '--');\n      if (!this._findOption(positiveLongFlag)) {\n        this.setOptionValueWithSource(\n          name,\n          option.defaultValue === undefined ? true : option.defaultValue,\n          'default',\n        );\n      }\n    } else if (option.defaultValue !== undefined) {\n      this.setOptionValueWithSource(name, option.defaultValue, 'default');\n    }\n\n    // handler for cli and env supplied values\n    const handleOptionValue = (val, invalidValueMessage, valueSource) => {\n      // val is null for optional option used without an optional-argument.\n      // val is undefined for boolean and negated option.\n      if (val == null && option.presetArg !== undefined) {\n        val = option.presetArg;\n      }\n\n      // custom processing\n      const oldValue = this.getOptionValue(name);\n      if (val !== null && option.parseArg) {\n        val = this._callParseArg(option, val, oldValue, invalidValueMessage);\n      } else if (val !== null && option.variadic) {\n        val = option._concatValue(val, oldValue);\n      }\n\n      // Fill-in appropriate missing values. Long winded but easy to follow.\n      if (val == null) {\n        if (option.negate) {\n          val = false;\n        } else if (option.isBoolean() || option.optional) {\n          val = true;\n        } else {\n          val = ''; // not normal, parseArg might have failed or be a mock function for testing\n        }\n      }\n      this.setOptionValueWithSource(name, val, valueSource);\n    };\n\n    this.on('option:' + oname, (val) => {\n      const invalidValueMessage = `error: option '${option.flags}' argument '${val}' is invalid.`;\n      handleOptionValue(val, invalidValueMessage, 'cli');\n    });\n\n    if (option.envVar) {\n      this.on('optionEnv:' + oname, (val) => {\n        const invalidValueMessage = `error: option '${option.flags}' value '${val}' from env '${option.envVar}' is invalid.`;\n        handleOptionValue(val, invalidValueMessage, 'env');\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Internal implementation shared by .option() and .requiredOption()\n   *\n   * @return {Command} `this` command for chaining\n   * @private\n   */\n  _optionEx(config, flags, description, fn, defaultValue) {\n    if (typeof flags === 'object' && flags instanceof Option) {\n      throw new Error(\n        'To add an Option object use addOption() instead of option() or requiredOption()',\n      );\n    }\n    const option = this.createOption(flags, description);\n    option.makeOptionMandatory(!!config.mandatory);\n    if (typeof fn === 'function') {\n      option.default(defaultValue).argParser(fn);\n    } else if (fn instanceof RegExp) {\n      // deprecated\n      const regex = fn;\n      fn = (val, def) => {\n        const m = regex.exec(val);\n        return m ? m[0] : def;\n      };\n      option.default(defaultValue).argParser(fn);\n    } else {\n      option.default(fn);\n    }\n\n    return this.addOption(option);\n  }\n\n  /**\n   * Define option with `flags`, `description`, and optional argument parsing function or `defaultValue` or both.\n   *\n   * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space. A required\n   * option-argument is indicated by `<>` and an optional option-argument by `[]`.\n   *\n   * See the README for more details, and see also addOption() and requiredOption().\n   *\n   * @example\n   * program\n   *     .option('-p, --pepper', 'add pepper')\n   *     .option('-p, --pizza-type <TYPE>', 'type of pizza') // required option-argument\n   *     .option('-c, --cheese [CHEESE]', 'add extra cheese', 'mozzarella') // optional option-argument with default\n   *     .option('-t, --tip <VALUE>', 'add tip to purchase cost', parseFloat) // custom parse function\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @param {(Function|*)} [parseArg] - custom option processing function or default value\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n\n  option(flags, description, parseArg, defaultValue) {\n    return this._optionEx({}, flags, description, parseArg, defaultValue);\n  }\n\n  /**\n   * Add a required option which must have a value after parsing. This usually means\n   * the option must be specified on the command line. (Otherwise the same as .option().)\n   *\n   * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @param {(Function|*)} [parseArg] - custom option processing function or default value\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n\n  requiredOption(flags, description, parseArg, defaultValue) {\n    return this._optionEx(\n      { mandatory: true },\n      flags,\n      description,\n      parseArg,\n      defaultValue,\n    );\n  }\n\n  /**\n   * Alter parsing of short flags with optional values.\n   *\n   * @example\n   * // for `.option('-f,--flag [value]'):\n   * program.combineFlagAndOptionalValue(true);  // `-f80` is treated like `--flag=80`, this is the default behaviour\n   * program.combineFlagAndOptionalValue(false) // `-fb` is treated like `-f -b`\n   *\n   * @param {boolean} [combine] - if `true` or omitted, an optional value can be specified directly after the flag.\n   * @return {Command} `this` command for chaining\n   */\n  combineFlagAndOptionalValue(combine = true) {\n    this._combineFlagAndOptionalValue = !!combine;\n    return this;\n  }\n\n  /**\n   * Allow unknown options on the command line.\n   *\n   * @param {boolean} [allowUnknown] - if `true` or omitted, no error will be thrown for unknown options.\n   * @return {Command} `this` command for chaining\n   */\n  allowUnknownOption(allowUnknown = true) {\n    this._allowUnknownOption = !!allowUnknown;\n    return this;\n  }\n\n  /**\n   * Allow excess command-arguments on the command line. Pass false to make excess arguments an error.\n   *\n   * @param {boolean} [allowExcess] - if `true` or omitted, no error will be thrown for excess arguments.\n   * @return {Command} `this` command for chaining\n   */\n  allowExcessArguments(allowExcess = true) {\n    this._allowExcessArguments = !!allowExcess;\n    return this;\n  }\n\n  /**\n   * Enable positional options. Positional means global options are specified before subcommands which lets\n   * subcommands reuse the same option names, and also enables subcommands to turn on passThroughOptions.\n   * The default behaviour is non-positional and global options may appear anywhere on the command line.\n   *\n   * @param {boolean} [positional]\n   * @return {Command} `this` command for chaining\n   */\n  enablePositionalOptions(positional = true) {\n    this._enablePositionalOptions = !!positional;\n    return this;\n  }\n\n  /**\n   * Pass through options that come after command-arguments rather than treat them as command-options,\n   * so actual command-options come before command-arguments. Turning this on for a subcommand requires\n   * positional options to have been enabled on the program (parent commands).\n   * The default behaviour is non-positional and options may appear before or after command-arguments.\n   *\n   * @param {boolean} [passThrough] for unknown options.\n   * @return {Command} `this` command for chaining\n   */\n  passThroughOptions(passThrough = true) {\n    this._passThroughOptions = !!passThrough;\n    this._checkForBrokenPassThrough();\n    return this;\n  }\n\n  /**\n   * @private\n   */\n\n  _checkForBrokenPassThrough() {\n    if (\n      this.parent &&\n      this._passThroughOptions &&\n      !this.parent._enablePositionalOptions\n    ) {\n      throw new Error(\n        `passThroughOptions cannot be used for '${this._name}' without turning on enablePositionalOptions for parent command(s)`,\n      );\n    }\n  }\n\n  /**\n   * Whether to store option values as properties on command object,\n   * or store separately (specify false). In both cases the option values can be accessed using .opts().\n   *\n   * @param {boolean} [storeAsProperties=true]\n   * @return {Command} `this` command for chaining\n   */\n\n  storeOptionsAsProperties(storeAsProperties = true) {\n    if (this.options.length) {\n      throw new Error('call .storeOptionsAsProperties() before adding options');\n    }\n    if (Object.keys(this._optionValues).length) {\n      throw new Error(\n        'call .storeOptionsAsProperties() before setting option values',\n      );\n    }\n    this._storeOptionsAsProperties = !!storeAsProperties;\n    return this;\n  }\n\n  /**\n   * Retrieve option value.\n   *\n   * @param {string} key\n   * @return {object} value\n   */\n\n  getOptionValue(key) {\n    if (this._storeOptionsAsProperties) {\n      return this[key];\n    }\n    return this._optionValues[key];\n  }\n\n  /**\n   * Store option value.\n   *\n   * @param {string} key\n   * @param {object} value\n   * @return {Command} `this` command for chaining\n   */\n\n  setOptionValue(key, value) {\n    return this.setOptionValueWithSource(key, value, undefined);\n  }\n\n  /**\n   * Store option value and where the value came from.\n   *\n   * @param {string} key\n   * @param {object} value\n   * @param {string} source - expected values are default/config/env/cli/implied\n   * @return {Command} `this` command for chaining\n   */\n\n  setOptionValueWithSource(key, value, source) {\n    if (this._storeOptionsAsProperties) {\n      this[key] = value;\n    } else {\n      this._optionValues[key] = value;\n    }\n    this._optionValueSources[key] = source;\n    return this;\n  }\n\n  /**\n   * Get source of option value.\n   * Expected values are default | config | env | cli | implied\n   *\n   * @param {string} key\n   * @return {string}\n   */\n\n  getOptionValueSource(key) {\n    return this._optionValueSources[key];\n  }\n\n  /**\n   * Get source of option value. See also .optsWithGlobals().\n   * Expected values are default | config | env | cli | implied\n   *\n   * @param {string} key\n   * @return {string}\n   */\n\n  getOptionValueSourceWithGlobals(key) {\n    // global overwrites local, like optsWithGlobals\n    let source;\n    this._getCommandAndAncestors().forEach((cmd) => {\n      if (cmd.getOptionValueSource(key) !== undefined) {\n        source = cmd.getOptionValueSource(key);\n      }\n    });\n    return source;\n  }\n\n  /**\n   * Get user arguments from implied or explicit arguments.\n   * Side-effects: set _scriptPath if args included script. Used for default program name, and subcommand searches.\n   *\n   * @private\n   */\n\n  _prepareUserArgs(argv, parseOptions) {\n    if (argv !== undefined && !Array.isArray(argv)) {\n      throw new Error('first parameter to parse must be array or undefined');\n    }\n    parseOptions = parseOptions || {};\n\n    // auto-detect argument conventions if nothing supplied\n    if (argv === undefined && parseOptions.from === undefined) {\n      if (process.versions?.electron) {\n        parseOptions.from = 'electron';\n      }\n      // check node specific options for scenarios where user CLI args follow executable without scriptname\n      const execArgv = process.execArgv ?? [];\n      if (\n        execArgv.includes('-e') ||\n        execArgv.includes('--eval') ||\n        execArgv.includes('-p') ||\n        execArgv.includes('--print')\n      ) {\n        parseOptions.from = 'eval'; // internal usage, not documented\n      }\n    }\n\n    // default to using process.argv\n    if (argv === undefined) {\n      argv = process.argv;\n    }\n    this.rawArgs = argv.slice();\n\n    // extract the user args and scriptPath\n    let userArgs;\n    switch (parseOptions.from) {\n      case undefined:\n      case 'node':\n        this._scriptPath = argv[1];\n        userArgs = argv.slice(2);\n        break;\n      case 'electron':\n        // @ts-ignore: because defaultApp is an unknown property\n        if (process.defaultApp) {\n          this._scriptPath = argv[1];\n          userArgs = argv.slice(2);\n        } else {\n          userArgs = argv.slice(1);\n        }\n        break;\n      case 'user':\n        userArgs = argv.slice(0);\n        break;\n      case 'eval':\n        userArgs = argv.slice(1);\n        break;\n      default:\n        throw new Error(\n          `unexpected parse option { from: '${parseOptions.from}' }`,\n        );\n    }\n\n    // Find default name for program from arguments.\n    if (!this._name && this._scriptPath)\n      this.nameFromFilename(this._scriptPath);\n    this._name = this._name || 'program';\n\n    return userArgs;\n  }\n\n  /**\n   * Parse `argv`, setting options and invoking commands when defined.\n   *\n   * Use parseAsync instead of parse if any of your action handlers are async.\n   *\n   * Call with no parameters to parse `process.argv`. Detects Electron and special node options like `node --eval`. Easy mode!\n   *\n   * Or call with an array of strings to parse, and optionally where the user arguments start by specifying where the arguments are `from`:\n   * - `'node'`: default, `argv[0]` is the application and `argv[1]` is the script being run, with user arguments after that\n   * - `'electron'`: `argv[0]` is the application and `argv[1]` varies depending on whether the electron application is packaged\n   * - `'user'`: just user arguments\n   *\n   * @example\n   * program.parse(); // parse process.argv and auto-detect electron and special node flags\n   * program.parse(process.argv); // assume argv[0] is app and argv[1] is script\n   * program.parse(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n   *\n   * @param {string[]} [argv] - optional, defaults to process.argv\n   * @param {object} [parseOptions] - optionally specify style of options with from: node/user/electron\n   * @param {string} [parseOptions.from] - where the args are from: 'node', 'user', 'electron'\n   * @return {Command} `this` command for chaining\n   */\n\n  parse(argv, parseOptions) {\n    const userArgs = this._prepareUserArgs(argv, parseOptions);\n    this._parseCommand([], userArgs);\n\n    return this;\n  }\n\n  /**\n   * Parse `argv`, setting options and invoking commands when defined.\n   *\n   * Call with no parameters to parse `process.argv`. Detects Electron and special node options like `node --eval`. Easy mode!\n   *\n   * Or call with an array of strings to parse, and optionally where the user arguments start by specifying where the arguments are `from`:\n   * - `'node'`: default, `argv[0]` is the application and `argv[1]` is the script being run, with user arguments after that\n   * - `'electron'`: `argv[0]` is the application and `argv[1]` varies depending on whether the electron application is packaged\n   * - `'user'`: just user arguments\n   *\n   * @example\n   * await program.parseAsync(); // parse process.argv and auto-detect electron and special node flags\n   * await program.parseAsync(process.argv); // assume argv[0] is app and argv[1] is script\n   * await program.parseAsync(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n   *\n   * @param {string[]} [argv]\n   * @param {object} [parseOptions]\n   * @param {string} parseOptions.from - where the args are from: 'node', 'user', 'electron'\n   * @return {Promise}\n   */\n\n  async parseAsync(argv, parseOptions) {\n    const userArgs = this._prepareUserArgs(argv, parseOptions);\n    await this._parseCommand([], userArgs);\n\n    return this;\n  }\n\n  /**\n   * Execute a sub-command executable.\n   *\n   * @private\n   */\n\n  _executeSubCommand(subcommand, args) {\n    args = args.slice();\n    let launchWithNode = false; // Use node for source targets so do not need to get permissions correct, and on Windows.\n    const sourceExt = ['.js', '.ts', '.tsx', '.mjs', '.cjs'];\n\n    function findFile(baseDir, baseName) {\n      // Look for specified file\n      const localBin = path.resolve(baseDir, baseName);\n      if (fs.existsSync(localBin)) return localBin;\n\n      // Stop looking if candidate already has an expected extension.\n      if (sourceExt.includes(path.extname(baseName))) return undefined;\n\n      // Try all the extensions.\n      const foundExt = sourceExt.find((ext) =>\n        fs.existsSync(`${localBin}${ext}`),\n      );\n      if (foundExt) return `${localBin}${foundExt}`;\n\n      return undefined;\n    }\n\n    // Not checking for help first. Unlikely to have mandatory and executable, and can't robustly test for help flags in external command.\n    this._checkForMissingMandatoryOptions();\n    this._checkForConflictingOptions();\n\n    // executableFile and executableDir might be full path, or just a name\n    let executableFile =\n      subcommand._executableFile || `${this._name}-${subcommand._name}`;\n    let executableDir = this._executableDir || '';\n    if (this._scriptPath) {\n      let resolvedScriptPath; // resolve possible symlink for installed npm binary\n      try {\n        resolvedScriptPath = fs.realpathSync(this._scriptPath);\n      } catch (err) {\n        resolvedScriptPath = this._scriptPath;\n      }\n      executableDir = path.resolve(\n        path.dirname(resolvedScriptPath),\n        executableDir,\n      );\n    }\n\n    // Look for a local file in preference to a command in PATH.\n    if (executableDir) {\n      let localFile = findFile(executableDir, executableFile);\n\n      // Legacy search using prefix of script name instead of command name\n      if (!localFile && !subcommand._executableFile && this._scriptPath) {\n        const legacyName = path.basename(\n          this._scriptPath,\n          path.extname(this._scriptPath),\n        );\n        if (legacyName !== this._name) {\n          localFile = findFile(\n            executableDir,\n            `${legacyName}-${subcommand._name}`,\n          );\n        }\n      }\n      executableFile = localFile || executableFile;\n    }\n\n    launchWithNode = sourceExt.includes(path.extname(executableFile));\n\n    let proc;\n    if (process.platform !== 'win32') {\n      if (launchWithNode) {\n        args.unshift(executableFile);\n        // add executable arguments to spawn\n        args = incrementNodeInspectorPort(process.execArgv).concat(args);\n\n        proc = childProcess.spawn(process.argv[0], args, { stdio: 'inherit' });\n      } else {\n        proc = childProcess.spawn(executableFile, args, { stdio: 'inherit' });\n      }\n    } else {\n      args.unshift(executableFile);\n      // add executable arguments to spawn\n      args = incrementNodeInspectorPort(process.execArgv).concat(args);\n      proc = childProcess.spawn(process.execPath, args, { stdio: 'inherit' });\n    }\n\n    if (!proc.killed) {\n      // testing mainly to avoid leak warnings during unit tests with mocked spawn\n      const signals = ['SIGUSR1', 'SIGUSR2', 'SIGTERM', 'SIGINT', 'SIGHUP'];\n      signals.forEach((signal) => {\n        process.on(signal, () => {\n          if (proc.killed === false && proc.exitCode === null) {\n            // @ts-ignore because signals not typed to known strings\n            proc.kill(signal);\n          }\n        });\n      });\n    }\n\n    // By default terminate process when spawned process terminates.\n    const exitCallback = this._exitCallback;\n    proc.on('close', (code) => {\n      code = code ?? 1; // code is null if spawned process terminated due to a signal\n      if (!exitCallback) {\n        process.exit(code);\n      } else {\n        exitCallback(\n          new CommanderError(\n            code,\n            'commander.executeSubCommandAsync',\n            '(close)',\n          ),\n        );\n      }\n    });\n    proc.on('error', (err) => {\n      // @ts-ignore: because err.code is an unknown property\n      if (err.code === 'ENOENT') {\n        const executableDirMessage = executableDir\n          ? `searched for local subcommand relative to directory '${executableDir}'`\n          : 'no directory for search for local subcommand, use .executableDir() to supply a custom directory';\n        const executableMissing = `'${executableFile}' does not exist\n - if '${subcommand._name}' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead\n - if the default executable name is not suitable, use the executableFile option to supply a custom name or path\n - ${executableDirMessage}`;\n        throw new Error(executableMissing);\n        // @ts-ignore: because err.code is an unknown property\n      } else if (err.code === 'EACCES') {\n        throw new Error(`'${executableFile}' not executable`);\n      }\n      if (!exitCallback) {\n        process.exit(1);\n      } else {\n        const wrappedError = new CommanderError(\n          1,\n          'commander.executeSubCommandAsync',\n          '(error)',\n        );\n        wrappedError.nestedError = err;\n        exitCallback(wrappedError);\n      }\n    });\n\n    // Store the reference to the child process\n    this.runningCommand = proc;\n  }\n\n  /**\n   * @private\n   */\n\n  _dispatchSubcommand(commandName, operands, unknown) {\n    const subCommand = this._findCommand(commandName);\n    if (!subCommand) this.help({ error: true });\n\n    let promiseChain;\n    promiseChain = this._chainOrCallSubCommandHook(\n      promiseChain,\n      subCommand,\n      'preSubcommand',\n    );\n    promiseChain = this._chainOrCall(promiseChain, () => {\n      if (subCommand._executableHandler) {\n        this._executeSubCommand(subCommand, operands.concat(unknown));\n      } else {\n        return subCommand._parseCommand(operands, unknown);\n      }\n    });\n    return promiseChain;\n  }\n\n  /**\n   * Invoke help directly if possible, or dispatch if necessary.\n   * e.g. help foo\n   *\n   * @private\n   */\n\n  _dispatchHelpCommand(subcommandName) {\n    if (!subcommandName) {\n      this.help();\n    }\n    const subCommand = this._findCommand(subcommandName);\n    if (subCommand && !subCommand._executableHandler) {\n      subCommand.help();\n    }\n\n    // Fallback to parsing the help flag to invoke the help.\n    return this._dispatchSubcommand(\n      subcommandName,\n      [],\n      [this._getHelpOption()?.long ?? this._getHelpOption()?.short ?? '--help'],\n    );\n  }\n\n  /**\n   * Check this.args against expected this.registeredArguments.\n   *\n   * @private\n   */\n\n  _checkNumberOfArguments() {\n    // too few\n    this.registeredArguments.forEach((arg, i) => {\n      if (arg.required && this.args[i] == null) {\n        this.missingArgument(arg.name());\n      }\n    });\n    // too many\n    if (\n      this.registeredArguments.length > 0 &&\n      this.registeredArguments[this.registeredArguments.length - 1].variadic\n    ) {\n      return;\n    }\n    if (this.args.length > this.registeredArguments.length) {\n      this._excessArguments(this.args);\n    }\n  }\n\n  /**\n   * Process this.args using this.registeredArguments and save as this.processedArgs!\n   *\n   * @private\n   */\n\n  _processArguments() {\n    const myParseArg = (argument, value, previous) => {\n      // Extra processing for nice error message on parsing failure.\n      let parsedValue = value;\n      if (value !== null && argument.parseArg) {\n        const invalidValueMessage = `error: command-argument value '${value}' is invalid for argument '${argument.name()}'.`;\n        parsedValue = this._callParseArg(\n          argument,\n          value,\n          previous,\n          invalidValueMessage,\n        );\n      }\n      return parsedValue;\n    };\n\n    this._checkNumberOfArguments();\n\n    const processedArgs = [];\n    this.registeredArguments.forEach((declaredArg, index) => {\n      let value = declaredArg.defaultValue;\n      if (declaredArg.variadic) {\n        // Collect together remaining arguments for passing together as an array.\n        if (index < this.args.length) {\n          value = this.args.slice(index);\n          if (declaredArg.parseArg) {\n            value = value.reduce((processed, v) => {\n              return myParseArg(declaredArg, v, processed);\n            }, declaredArg.defaultValue);\n          }\n        } else if (value === undefined) {\n          value = [];\n        }\n      } else if (index < this.args.length) {\n        value = this.args[index];\n        if (declaredArg.parseArg) {\n          value = myParseArg(declaredArg, value, declaredArg.defaultValue);\n        }\n      }\n      processedArgs[index] = value;\n    });\n    this.processedArgs = processedArgs;\n  }\n\n  /**\n   * Once we have a promise we chain, but call synchronously until then.\n   *\n   * @param {(Promise|undefined)} promise\n   * @param {Function} fn\n   * @return {(Promise|undefined)}\n   * @private\n   */\n\n  _chainOrCall(promise, fn) {\n    // thenable\n    if (promise && promise.then && typeof promise.then === 'function') {\n      // already have a promise, chain callback\n      return promise.then(() => fn());\n    }\n    // callback might return a promise\n    return fn();\n  }\n\n  /**\n   *\n   * @param {(Promise|undefined)} promise\n   * @param {string} event\n   * @return {(Promise|undefined)}\n   * @private\n   */\n\n  _chainOrCallHooks(promise, event) {\n    let result = promise;\n    const hooks = [];\n    this._getCommandAndAncestors()\n      .reverse()\n      .filter((cmd) => cmd._lifeCycleHooks[event] !== undefined)\n      .forEach((hookedCommand) => {\n        hookedCommand._lifeCycleHooks[event].forEach((callback) => {\n          hooks.push({ hookedCommand, callback });\n        });\n      });\n    if (event === 'postAction') {\n      hooks.reverse();\n    }\n\n    hooks.forEach((hookDetail) => {\n      result = this._chainOrCall(result, () => {\n        return hookDetail.callback(hookDetail.hookedCommand, this);\n      });\n    });\n    return result;\n  }\n\n  /**\n   *\n   * @param {(Promise|undefined)} promise\n   * @param {Command} subCommand\n   * @param {string} event\n   * @return {(Promise|undefined)}\n   * @private\n   */\n\n  _chainOrCallSubCommandHook(promise, subCommand, event) {\n    let result = promise;\n    if (this._lifeCycleHooks[event] !== undefined) {\n      this._lifeCycleHooks[event].forEach((hook) => {\n        result = this._chainOrCall(result, () => {\n          return hook(this, subCommand);\n        });\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Process arguments in context of this command.\n   * Returns action result, in case it is a promise.\n   *\n   * @private\n   */\n\n  _parseCommand(operands, unknown) {\n    const parsed = this.parseOptions(unknown);\n    this._parseOptionsEnv(); // after cli, so parseArg not called on both cli and env\n    this._parseOptionsImplied();\n    operands = operands.concat(parsed.operands);\n    unknown = parsed.unknown;\n    this.args = operands.concat(unknown);\n\n    if (operands && this._findCommand(operands[0])) {\n      return this._dispatchSubcommand(operands[0], operands.slice(1), unknown);\n    }\n    if (\n      this._getHelpCommand() &&\n      operands[0] === this._getHelpCommand().name()\n    ) {\n      return this._dispatchHelpCommand(operands[1]);\n    }\n    if (this._defaultCommandName) {\n      this._outputHelpIfRequested(unknown); // Run the help for default command from parent rather than passing to default command\n      return this._dispatchSubcommand(\n        this._defaultCommandName,\n        operands,\n        unknown,\n      );\n    }\n    if (\n      this.commands.length &&\n      this.args.length === 0 &&\n      !this._actionHandler &&\n      !this._defaultCommandName\n    ) {\n      // probably missing subcommand and no handler, user needs help (and exit)\n      this.help({ error: true });\n    }\n\n    this._outputHelpIfRequested(parsed.unknown);\n    this._checkForMissingMandatoryOptions();\n    this._checkForConflictingOptions();\n\n    // We do not always call this check to avoid masking a \"better\" error, like unknown command.\n    const checkForUnknownOptions = () => {\n      if (parsed.unknown.length > 0) {\n        this.unknownOption(parsed.unknown[0]);\n      }\n    };\n\n    const commandEvent = `command:${this.name()}`;\n    if (this._actionHandler) {\n      checkForUnknownOptions();\n      this._processArguments();\n\n      let promiseChain;\n      promiseChain = this._chainOrCallHooks(promiseChain, 'preAction');\n      promiseChain = this._chainOrCall(promiseChain, () =>\n        this._actionHandler(this.processedArgs),\n      );\n      if (this.parent) {\n        promiseChain = this._chainOrCall(promiseChain, () => {\n          this.parent.emit(commandEvent, operands, unknown); // legacy\n        });\n      }\n      promiseChain = this._chainOrCallHooks(promiseChain, 'postAction');\n      return promiseChain;\n    }\n    if (this.parent && this.parent.listenerCount(commandEvent)) {\n      checkForUnknownOptions();\n      this._processArguments();\n      this.parent.emit(commandEvent, operands, unknown); // legacy\n    } else if (operands.length) {\n      if (this._findCommand('*')) {\n        // legacy default command\n        return this._dispatchSubcommand('*', operands, unknown);\n      }\n      if (this.listenerCount('command:*')) {\n        // skip option check, emit event for possible misspelling suggestion\n        this.emit('command:*', operands, unknown);\n      } else if (this.commands.length) {\n        this.unknownCommand();\n      } else {\n        checkForUnknownOptions();\n        this._processArguments();\n      }\n    } else if (this.commands.length) {\n      checkForUnknownOptions();\n      // This command has subcommands and nothing hooked up at this level, so display help (and exit).\n      this.help({ error: true });\n    } else {\n      checkForUnknownOptions();\n      this._processArguments();\n      // fall through for caller to handle after calling .parse()\n    }\n  }\n\n  /**\n   * Find matching command.\n   *\n   * @private\n   * @return {Command | undefined}\n   */\n  _findCommand(name) {\n    if (!name) return undefined;\n    return this.commands.find(\n      (cmd) => cmd._name === name || cmd._aliases.includes(name),\n    );\n  }\n\n  /**\n   * Return an option matching `arg` if any.\n   *\n   * @param {string} arg\n   * @return {Option}\n   * @package\n   */\n\n  _findOption(arg) {\n    return this.options.find((option) => option.is(arg));\n  }\n\n  /**\n   * Display an error message if a mandatory option does not have a value.\n   * Called after checking for help flags in leaf subcommand.\n   *\n   * @private\n   */\n\n  _checkForMissingMandatoryOptions() {\n    // Walk up hierarchy so can call in subcommand after checking for displaying help.\n    this._getCommandAndAncestors().forEach((cmd) => {\n      cmd.options.forEach((anOption) => {\n        if (\n          anOption.mandatory &&\n          cmd.getOptionValue(anOption.attributeName()) === undefined\n        ) {\n          cmd.missingMandatoryOptionValue(anOption);\n        }\n      });\n    });\n  }\n\n  /**\n   * Display an error message if conflicting options are used together in this.\n   *\n   * @private\n   */\n  _checkForConflictingLocalOptions() {\n    const definedNonDefaultOptions = this.options.filter((option) => {\n      const optionKey = option.attributeName();\n      if (this.getOptionValue(optionKey) === undefined) {\n        return false;\n      }\n      return this.getOptionValueSource(optionKey) !== 'default';\n    });\n\n    const optionsWithConflicting = definedNonDefaultOptions.filter(\n      (option) => option.conflictsWith.length > 0,\n    );\n\n    optionsWithConflicting.forEach((option) => {\n      const conflictingAndDefined = definedNonDefaultOptions.find((defined) =>\n        option.conflictsWith.includes(defined.attributeName()),\n      );\n      if (conflictingAndDefined) {\n        this._conflictingOption(option, conflictingAndDefined);\n      }\n    });\n  }\n\n  /**\n   * Display an error message if conflicting options are used together.\n   * Called after checking for help flags in leaf subcommand.\n   *\n   * @private\n   */\n  _checkForConflictingOptions() {\n    // Walk up hierarchy so can call in subcommand after checking for displaying help.\n    this._getCommandAndAncestors().forEach((cmd) => {\n      cmd._checkForConflictingLocalOptions();\n    });\n  }\n\n  /**\n   * Parse options from `argv` removing known options,\n   * and return argv split into operands and unknown arguments.\n   *\n   * Examples:\n   *\n   *     argv => operands, unknown\n   *     --known kkk op => [op], []\n   *     op --known kkk => [op], []\n   *     sub --unknown uuu op => [sub], [--unknown uuu op]\n   *     sub -- --unknown uuu op => [sub --unknown uuu op], []\n   *\n   * @param {string[]} argv\n   * @return {{operands: string[], unknown: string[]}}\n   */\n\n  parseOptions(argv) {\n    const operands = []; // operands, not options or values\n    const unknown = []; // first unknown option and remaining unknown args\n    let dest = operands;\n    const args = argv.slice();\n\n    function maybeOption(arg) {\n      return arg.length > 1 && arg[0] === '-';\n    }\n\n    // parse options\n    let activeVariadicOption = null;\n    while (args.length) {\n      const arg = args.shift();\n\n      // literal\n      if (arg === '--') {\n        if (dest === unknown) dest.push(arg);\n        dest.push(...args);\n        break;\n      }\n\n      if (activeVariadicOption && !maybeOption(arg)) {\n        this.emit(`option:${activeVariadicOption.name()}`, arg);\n        continue;\n      }\n      activeVariadicOption = null;\n\n      if (maybeOption(arg)) {\n        const option = this._findOption(arg);\n        // recognised option, call listener to assign value with possible custom processing\n        if (option) {\n          if (option.required) {\n            const value = args.shift();\n            if (value === undefined) this.optionMissingArgument(option);\n            this.emit(`option:${option.name()}`, value);\n          } else if (option.optional) {\n            let value = null;\n            // historical behaviour is optional value is following arg unless an option\n            if (args.length > 0 && !maybeOption(args[0])) {\n              value = args.shift();\n            }\n            this.emit(`option:${option.name()}`, value);\n          } else {\n            // boolean flag\n            this.emit(`option:${option.name()}`);\n          }\n          activeVariadicOption = option.variadic ? option : null;\n          continue;\n        }\n      }\n\n      // Look for combo options following single dash, eat first one if known.\n      if (arg.length > 2 && arg[0] === '-' && arg[1] !== '-') {\n        const option = this._findOption(`-${arg[1]}`);\n        if (option) {\n          if (\n            option.required ||\n            (option.optional && this._combineFlagAndOptionalValue)\n          ) {\n            // option with value following in same argument\n            this.emit(`option:${option.name()}`, arg.slice(2));\n          } else {\n            // boolean option, emit and put back remainder of arg for further processing\n            this.emit(`option:${option.name()}`);\n            args.unshift(`-${arg.slice(2)}`);\n          }\n          continue;\n        }\n      }\n\n      // Look for known long flag with value, like --foo=bar\n      if (/^--[^=]+=/.test(arg)) {\n        const index = arg.indexOf('=');\n        const option = this._findOption(arg.slice(0, index));\n        if (option && (option.required || option.optional)) {\n          this.emit(`option:${option.name()}`, arg.slice(index + 1));\n          continue;\n        }\n      }\n\n      // Not a recognised option by this command.\n      // Might be a command-argument, or subcommand option, or unknown option, or help command or option.\n\n      // An unknown option means further arguments also classified as unknown so can be reprocessed by subcommands.\n      if (maybeOption(arg)) {\n        dest = unknown;\n      }\n\n      // If using positionalOptions, stop processing our options at subcommand.\n      if (\n        (this._enablePositionalOptions || this._passThroughOptions) &&\n        operands.length === 0 &&\n        unknown.length === 0\n      ) {\n        if (this._findCommand(arg)) {\n          operands.push(arg);\n          if (args.length > 0) unknown.push(...args);\n          break;\n        } else if (\n          this._getHelpCommand() &&\n          arg === this._getHelpCommand().name()\n        ) {\n          operands.push(arg);\n          if (args.length > 0) operands.push(...args);\n          break;\n        } else if (this._defaultCommandName) {\n          unknown.push(arg);\n          if (args.length > 0) unknown.push(...args);\n          break;\n        }\n      }\n\n      // If using passThroughOptions, stop processing options at first command-argument.\n      if (this._passThroughOptions) {\n        dest.push(arg);\n        if (args.length > 0) dest.push(...args);\n        break;\n      }\n\n      // add arg\n      dest.push(arg);\n    }\n\n    return { operands, unknown };\n  }\n\n  /**\n   * Return an object containing local option values as key-value pairs.\n   *\n   * @return {object}\n   */\n  opts() {\n    if (this._storeOptionsAsProperties) {\n      // Preserve original behaviour so backwards compatible when still using properties\n      const result = {};\n      const len = this.options.length;\n\n      for (let i = 0; i < len; i++) {\n        const key = this.options[i].attributeName();\n        result[key] =\n          key === this._versionOptionName ? this._version : this[key];\n      }\n      return result;\n    }\n\n    return this._optionValues;\n  }\n\n  /**\n   * Return an object containing merged local and global option values as key-value pairs.\n   *\n   * @return {object}\n   */\n  optsWithGlobals() {\n    // globals overwrite locals\n    return this._getCommandAndAncestors().reduce(\n      (combinedOptions, cmd) => Object.assign(combinedOptions, cmd.opts()),\n      {},\n    );\n  }\n\n  /**\n   * Display error message and exit (or call exitOverride).\n   *\n   * @param {string} message\n   * @param {object} [errorOptions]\n   * @param {string} [errorOptions.code] - an id string representing the error\n   * @param {number} [errorOptions.exitCode] - used with process.exit\n   */\n  error(message, errorOptions) {\n    // output handling\n    this._outputConfiguration.outputError(\n      `${message}\\n`,\n      this._outputConfiguration.writeErr,\n    );\n    if (typeof this._showHelpAfterError === 'string') {\n      this._outputConfiguration.writeErr(`${this._showHelpAfterError}\\n`);\n    } else if (this._showHelpAfterError) {\n      this._outputConfiguration.writeErr('\\n');\n      this.outputHelp({ error: true });\n    }\n\n    // exit handling\n    const config = errorOptions || {};\n    const exitCode = config.exitCode || 1;\n    const code = config.code || 'commander.error';\n    this._exit(exitCode, code, message);\n  }\n\n  /**\n   * Apply any option related environment variables, if option does\n   * not have a value from cli or client code.\n   *\n   * @private\n   */\n  _parseOptionsEnv() {\n    this.options.forEach((option) => {\n      if (option.envVar && option.envVar in process.env) {\n        const optionKey = option.attributeName();\n        // Priority check. Do not overwrite cli or options from unknown source (client-code).\n        if (\n          this.getOptionValue(optionKey) === undefined ||\n          ['default', 'config', 'env'].includes(\n            this.getOptionValueSource(optionKey),\n          )\n        ) {\n          if (option.required || option.optional) {\n            // option can take a value\n            // keep very simple, optional always takes value\n            this.emit(`optionEnv:${option.name()}`, process.env[option.envVar]);\n          } else {\n            // boolean\n            // keep very simple, only care that envVar defined and not the value\n            this.emit(`optionEnv:${option.name()}`);\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Apply any implied option values, if option is undefined or default value.\n   *\n   * @private\n   */\n  _parseOptionsImplied() {\n    const dualHelper = new DualOptions(this.options);\n    const hasCustomOptionValue = (optionKey) => {\n      return (\n        this.getOptionValue(optionKey) !== undefined &&\n        !['default', 'implied'].includes(this.getOptionValueSource(optionKey))\n      );\n    };\n    this.options\n      .filter(\n        (option) =>\n          option.implied !== undefined &&\n          hasCustomOptionValue(option.attributeName()) &&\n          dualHelper.valueFromOption(\n            this.getOptionValue(option.attributeName()),\n            option,\n          ),\n      )\n      .forEach((option) => {\n        Object.keys(option.implied)\n          .filter((impliedKey) => !hasCustomOptionValue(impliedKey))\n          .forEach((impliedKey) => {\n            this.setOptionValueWithSource(\n              impliedKey,\n              option.implied[impliedKey],\n              'implied',\n            );\n          });\n      });\n  }\n\n  /**\n   * Argument `name` is missing.\n   *\n   * @param {string} name\n   * @private\n   */\n\n  missingArgument(name) {\n    const message = `error: missing required argument '${name}'`;\n    this.error(message, { code: 'commander.missingArgument' });\n  }\n\n  /**\n   * `Option` is missing an argument.\n   *\n   * @param {Option} option\n   * @private\n   */\n\n  optionMissingArgument(option) {\n    const message = `error: option '${option.flags}' argument missing`;\n    this.error(message, { code: 'commander.optionMissingArgument' });\n  }\n\n  /**\n   * `Option` does not have a value, and is a mandatory option.\n   *\n   * @param {Option} option\n   * @private\n   */\n\n  missingMandatoryOptionValue(option) {\n    const message = `error: required option '${option.flags}' not specified`;\n    this.error(message, { code: 'commander.missingMandatoryOptionValue' });\n  }\n\n  /**\n   * `Option` conflicts with another option.\n   *\n   * @param {Option} option\n   * @param {Option} conflictingOption\n   * @private\n   */\n  _conflictingOption(option, conflictingOption) {\n    // The calling code does not know whether a negated option is the source of the\n    // value, so do some work to take an educated guess.\n    const findBestOptionFromValue = (option) => {\n      const optionKey = option.attributeName();\n      const optionValue = this.getOptionValue(optionKey);\n      const negativeOption = this.options.find(\n        (target) => target.negate && optionKey === target.attributeName(),\n      );\n      const positiveOption = this.options.find(\n        (target) => !target.negate && optionKey === target.attributeName(),\n      );\n      if (\n        negativeOption &&\n        ((negativeOption.presetArg === undefined && optionValue === false) ||\n          (negativeOption.presetArg !== undefined &&\n            optionValue === negativeOption.presetArg))\n      ) {\n        return negativeOption;\n      }\n      return positiveOption || option;\n    };\n\n    const getErrorMessage = (option) => {\n      const bestOption = findBestOptionFromValue(option);\n      const optionKey = bestOption.attributeName();\n      const source = this.getOptionValueSource(optionKey);\n      if (source === 'env') {\n        return `environment variable '${bestOption.envVar}'`;\n      }\n      return `option '${bestOption.flags}'`;\n    };\n\n    const message = `error: ${getErrorMessage(option)} cannot be used with ${getErrorMessage(conflictingOption)}`;\n    this.error(message, { code: 'commander.conflictingOption' });\n  }\n\n  /**\n   * Unknown option `flag`.\n   *\n   * @param {string} flag\n   * @private\n   */\n\n  unknownOption(flag) {\n    if (this._allowUnknownOption) return;\n    let suggestion = '';\n\n    if (flag.startsWith('--') && this._showSuggestionAfterError) {\n      // Looping to pick up the global options too\n      let candidateFlags = [];\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      let command = this;\n      do {\n        const moreFlags = command\n          .createHelp()\n          .visibleOptions(command)\n          .filter((option) => option.long)\n          .map((option) => option.long);\n        candidateFlags = candidateFlags.concat(moreFlags);\n        command = command.parent;\n      } while (command && !command._enablePositionalOptions);\n      suggestion = suggestSimilar(flag, candidateFlags);\n    }\n\n    const message = `error: unknown option '${flag}'${suggestion}`;\n    this.error(message, { code: 'commander.unknownOption' });\n  }\n\n  /**\n   * Excess arguments, more than expected.\n   *\n   * @param {string[]} receivedArgs\n   * @private\n   */\n\n  _excessArguments(receivedArgs) {\n    if (this._allowExcessArguments) return;\n\n    const expected = this.registeredArguments.length;\n    const s = expected === 1 ? '' : 's';\n    const forSubcommand = this.parent ? ` for '${this.name()}'` : '';\n    const message = `error: too many arguments${forSubcommand}. Expected ${expected} argument${s} but got ${receivedArgs.length}.`;\n    this.error(message, { code: 'commander.excessArguments' });\n  }\n\n  /**\n   * Unknown command.\n   *\n   * @private\n   */\n\n  unknownCommand() {\n    const unknownName = this.args[0];\n    let suggestion = '';\n\n    if (this._showSuggestionAfterError) {\n      const candidateNames = [];\n      this.createHelp()\n        .visibleCommands(this)\n        .forEach((command) => {\n          candidateNames.push(command.name());\n          // just visible alias\n          if (command.alias()) candidateNames.push(command.alias());\n        });\n      suggestion = suggestSimilar(unknownName, candidateNames);\n    }\n\n    const message = `error: unknown command '${unknownName}'${suggestion}`;\n    this.error(message, { code: 'commander.unknownCommand' });\n  }\n\n  /**\n   * Get or set the program version.\n   *\n   * This method auto-registers the \"-V, --version\" option which will print the version number.\n   *\n   * You can optionally supply the flags and description to override the defaults.\n   *\n   * @param {string} [str]\n   * @param {string} [flags]\n   * @param {string} [description]\n   * @return {(this | string | undefined)} `this` command for chaining, or version string if no arguments\n   */\n\n  version(str, flags, description) {\n    if (str === undefined) return this._version;\n    this._version = str;\n    flags = flags || '-V, --version';\n    description = description || 'output the version number';\n    const versionOption = this.createOption(flags, description);\n    this._versionOptionName = versionOption.attributeName();\n    this._registerOption(versionOption);\n\n    this.on('option:' + versionOption.name(), () => {\n      this._outputConfiguration.writeOut(`${str}\\n`);\n      this._exit(0, 'commander.version', str);\n    });\n    return this;\n  }\n\n  /**\n   * Set the description.\n   *\n   * @param {string} [str]\n   * @param {object} [argsDescription]\n   * @return {(string|Command)}\n   */\n  description(str, argsDescription) {\n    if (str === undefined && argsDescription === undefined)\n      return this._description;\n    this._description = str;\n    if (argsDescription) {\n      this._argsDescription = argsDescription;\n    }\n    return this;\n  }\n\n  /**\n   * Set the summary. Used when listed as subcommand of parent.\n   *\n   * @param {string} [str]\n   * @return {(string|Command)}\n   */\n  summary(str) {\n    if (str === undefined) return this._summary;\n    this._summary = str;\n    return this;\n  }\n\n  /**\n   * Set an alias for the command.\n   *\n   * You may call more than once to add multiple aliases. Only the first alias is shown in the auto-generated help.\n   *\n   * @param {string} [alias]\n   * @return {(string|Command)}\n   */\n\n  alias(alias) {\n    if (alias === undefined) return this._aliases[0]; // just return first, for backwards compatibility\n\n    /** @type {Command} */\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let command = this;\n    if (\n      this.commands.length !== 0 &&\n      this.commands[this.commands.length - 1]._executableHandler\n    ) {\n      // assume adding alias for last added executable subcommand, rather than this\n      command = this.commands[this.commands.length - 1];\n    }\n\n    if (alias === command._name)\n      throw new Error(\"Command alias can't be the same as its name\");\n    const matchingCommand = this.parent?._findCommand(alias);\n    if (matchingCommand) {\n      // c.f. _registerCommand\n      const existingCmd = [matchingCommand.name()]\n        .concat(matchingCommand.aliases())\n        .join('|');\n      throw new Error(\n        `cannot add alias '${alias}' to command '${this.name()}' as already have command '${existingCmd}'`,\n      );\n    }\n\n    command._aliases.push(alias);\n    return this;\n  }\n\n  /**\n   * Set aliases for the command.\n   *\n   * Only the first alias is shown in the auto-generated help.\n   *\n   * @param {string[]} [aliases]\n   * @return {(string[]|Command)}\n   */\n\n  aliases(aliases) {\n    // Getter for the array of aliases is the main reason for having aliases() in addition to alias().\n    if (aliases === undefined) return this._aliases;\n\n    aliases.forEach((alias) => this.alias(alias));\n    return this;\n  }\n\n  /**\n   * Set / get the command usage `str`.\n   *\n   * @param {string} [str]\n   * @return {(string|Command)}\n   */\n\n  usage(str) {\n    if (str === undefined) {\n      if (this._usage) return this._usage;\n\n      const args = this.registeredArguments.map((arg) => {\n        return humanReadableArgName(arg);\n      });\n      return []\n        .concat(\n          this.options.length || this._helpOption !== null ? '[options]' : [],\n          this.commands.length ? '[command]' : [],\n          this.registeredArguments.length ? args : [],\n        )\n        .join(' ');\n    }\n\n    this._usage = str;\n    return this;\n  }\n\n  /**\n   * Get or set the name of the command.\n   *\n   * @param {string} [str]\n   * @return {(string|Command)}\n   */\n\n  name(str) {\n    if (str === undefined) return this._name;\n    this._name = str;\n    return this;\n  }\n\n  /**\n   * Set the name of the command from script filename, such as process.argv[1],\n   * or require.main.filename, or __filename.\n   *\n   * (Used internally and public although not documented in README.)\n   *\n   * @example\n   * program.nameFromFilename(require.main.filename);\n   *\n   * @param {string} filename\n   * @return {Command}\n   */\n\n  nameFromFilename(filename) {\n    this._name = path.basename(filename, path.extname(filename));\n\n    return this;\n  }\n\n  /**\n   * Get or set the directory for searching for executable subcommands of this command.\n   *\n   * @example\n   * program.executableDir(__dirname);\n   * // or\n   * program.executableDir('subcommands');\n   *\n   * @param {string} [path]\n   * @return {(string|null|Command)}\n   */\n\n  executableDir(path) {\n    if (path === undefined) return this._executableDir;\n    this._executableDir = path;\n    return this;\n  }\n\n  /**\n   * Return program help documentation.\n   *\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to wrap for stderr instead of stdout\n   * @return {string}\n   */\n\n  helpInformation(contextOptions) {\n    const helper = this.createHelp();\n    if (helper.helpWidth === undefined) {\n      helper.helpWidth =\n        contextOptions && contextOptions.error\n          ? this._outputConfiguration.getErrHelpWidth()\n          : this._outputConfiguration.getOutHelpWidth();\n    }\n    return helper.formatHelp(this, helper);\n  }\n\n  /**\n   * @private\n   */\n\n  _getHelpContext(contextOptions) {\n    contextOptions = contextOptions || {};\n    const context = { error: !!contextOptions.error };\n    let write;\n    if (context.error) {\n      write = (arg) => this._outputConfiguration.writeErr(arg);\n    } else {\n      write = (arg) => this._outputConfiguration.writeOut(arg);\n    }\n    context.write = contextOptions.write || write;\n    context.command = this;\n    return context;\n  }\n\n  /**\n   * Output help information for this command.\n   *\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\n   *\n   * @param {{ error: boolean } | Function} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n   */\n\n  outputHelp(contextOptions) {\n    let deprecatedCallback;\n    if (typeof contextOptions === 'function') {\n      deprecatedCallback = contextOptions;\n      contextOptions = undefined;\n    }\n    const context = this._getHelpContext(contextOptions);\n\n    this._getCommandAndAncestors()\n      .reverse()\n      .forEach((command) => command.emit('beforeAllHelp', context));\n    this.emit('beforeHelp', context);\n\n    let helpInformation = this.helpInformation(context);\n    if (deprecatedCallback) {\n      helpInformation = deprecatedCallback(helpInformation);\n      if (\n        typeof helpInformation !== 'string' &&\n        !Buffer.isBuffer(helpInformation)\n      ) {\n        throw new Error('outputHelp callback must return a string or a Buffer');\n      }\n    }\n    context.write(helpInformation);\n\n    if (this._getHelpOption()?.long) {\n      this.emit(this._getHelpOption().long); // deprecated\n    }\n    this.emit('afterHelp', context);\n    this._getCommandAndAncestors().forEach((command) =>\n      command.emit('afterAllHelp', context),\n    );\n  }\n\n  /**\n   * You can pass in flags and a description to customise the built-in help option.\n   * Pass in false to disable the built-in help option.\n   *\n   * @example\n   * program.helpOption('-?, --help' 'show help'); // customise\n   * program.helpOption(false); // disable\n   *\n   * @param {(string | boolean)} flags\n   * @param {string} [description]\n   * @return {Command} `this` command for chaining\n   */\n\n  helpOption(flags, description) {\n    // Support disabling built-in help option.\n    if (typeof flags === 'boolean') {\n      if (flags) {\n        this._helpOption = this._helpOption ?? undefined; // preserve existing option\n      } else {\n        this._helpOption = null; // disable\n      }\n      return this;\n    }\n\n    // Customise flags and description.\n    flags = flags ?? '-h, --help';\n    description = description ?? 'display help for command';\n    this._helpOption = this.createOption(flags, description);\n\n    return this;\n  }\n\n  /**\n   * Lazy create help option.\n   * Returns null if has been disabled with .helpOption(false).\n   *\n   * @returns {(Option | null)} the help option\n   * @package\n   */\n  _getHelpOption() {\n    // Lazy create help option on demand.\n    if (this._helpOption === undefined) {\n      this.helpOption(undefined, undefined);\n    }\n    return this._helpOption;\n  }\n\n  /**\n   * Supply your own option to use for the built-in help option.\n   * This is an alternative to using helpOption() to customise the flags and description etc.\n   *\n   * @param {Option} option\n   * @return {Command} `this` command for chaining\n   */\n  addHelpOption(option) {\n    this._helpOption = option;\n    return this;\n  }\n\n  /**\n   * Output help information and exit.\n   *\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\n   *\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n   */\n\n  help(contextOptions) {\n    this.outputHelp(contextOptions);\n    let exitCode = process.exitCode || 0;\n    if (\n      exitCode === 0 &&\n      contextOptions &&\n      typeof contextOptions !== 'function' &&\n      contextOptions.error\n    ) {\n      exitCode = 1;\n    }\n    // message: do not have all displayed text available so only passing placeholder.\n    this._exit(exitCode, 'commander.help', '(outputHelp)');\n  }\n\n  /**\n   * Add additional text to be displayed with the built-in help.\n   *\n   * Position is 'before' or 'after' to affect just this command,\n   * and 'beforeAll' or 'afterAll' to affect this command and all its subcommands.\n   *\n   * @param {string} position - before or after built-in help\n   * @param {(string | Function)} text - string to add, or a function returning a string\n   * @return {Command} `this` command for chaining\n   */\n  addHelpText(position, text) {\n    const allowedValues = ['beforeAll', 'before', 'after', 'afterAll'];\n    if (!allowedValues.includes(position)) {\n      throw new Error(`Unexpected value for position to addHelpText.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n    }\n    const helpEvent = `${position}Help`;\n    this.on(helpEvent, (context) => {\n      let helpStr;\n      if (typeof text === 'function') {\n        helpStr = text({ error: context.error, command: context.command });\n      } else {\n        helpStr = text;\n      }\n      // Ignore falsy value when nothing to output.\n      if (helpStr) {\n        context.write(`${helpStr}\\n`);\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Output help information if help flags specified\n   *\n   * @param {Array} args - array of options to search for help flags\n   * @private\n   */\n\n  _outputHelpIfRequested(args) {\n    const helpOption = this._getHelpOption();\n    const helpRequested = helpOption && args.find((arg) => helpOption.is(arg));\n    if (helpRequested) {\n      this.outputHelp();\n      // (Do not have all displayed text available so only passing placeholder.)\n      this._exit(0, 'commander.helpDisplayed', '(outputHelp)');\n    }\n  }\n}\n\n/**\n * Scan arguments and increment port number for inspect calls (to avoid conflicts when spawning new command).\n *\n * @param {string[]} args - array of arguments from node.execArgv\n * @returns {string[]}\n * @private\n */\n\nfunction incrementNodeInspectorPort(args) {\n  // Testing for these options:\n  //  --inspect[=[host:]port]\n  //  --inspect-brk[=[host:]port]\n  //  --inspect-port=[host:]port\n  return args.map((arg) => {\n    if (!arg.startsWith('--inspect')) {\n      return arg;\n    }\n    let debugOption;\n    let debugHost = '127.0.0.1';\n    let debugPort = '9229';\n    let match;\n    if ((match = arg.match(/^(--inspect(-brk)?)$/)) !== null) {\n      // e.g. --inspect\n      debugOption = match[1];\n    } else if (\n      (match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+)$/)) !== null\n    ) {\n      debugOption = match[1];\n      if (/^\\d+$/.test(match[3])) {\n        // e.g. --inspect=1234\n        debugPort = match[3];\n      } else {\n        // e.g. --inspect=localhost\n        debugHost = match[3];\n      }\n    } else if (\n      (match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+):(\\d+)$/)) !== null\n    ) {\n      // e.g. --inspect=localhost:1234\n      debugOption = match[1];\n      debugHost = match[3];\n      debugPort = match[4];\n    }\n\n    if (debugOption && debugPort !== '0') {\n      return `${debugOption}=${debugHost}:${parseInt(debugPort) + 1}`;\n    }\n    return arg;\n  });\n}\n\nexports.Command = Command;\n","const { Argument } = require('./lib/argument.js');\nconst { Command } = require('./lib/command.js');\nconst { CommanderError, InvalidArgumentError } = require('./lib/error.js');\nconst { Help } = require('./lib/help.js');\nconst { Option } = require('./lib/option.js');\n\nexports.program = new Command();\n\nexports.createCommand = (name) => new Command(name);\nexports.createOption = (flags, description) => new Option(flags, description);\nexports.createArgument = (name, description) => new Argument(name, description);\n\n/**\n * Expose classes\n */\n\nexports.Command = Command;\nexports.Option = Option;\nexports.Argument = Argument;\nexports.Help = Help;\n\nexports.CommanderError = CommanderError;\nexports.InvalidArgumentError = InvalidArgumentError;\nexports.InvalidOptionArgumentError = InvalidArgumentError; // Deprecated\n","import commander from './index.js';\n\n// wrapper to provide named exports for ESM.\nexport const {\n  program,\n  createCommand,\n  createArgument,\n  createOption,\n  CommanderError,\n  InvalidArgumentError,\n  InvalidOptionArgumentError, // deprecated old name\n  Command,\n  Argument,\n  Option,\n  Help,\n} = commander;\n","#! /usr/bin/env node\n\nimport { program } from 'commander';\nimport _ from 'lodash';\nimport util from 'util';\nimport {ValidationOutcome, ValidationResult} from './api-types';\nimport {SwaggerMockValidatorFactory} from './swagger-mock-validator-factory';\n\nimport packageJson from \"../package.json\";\n\nconst displaySummaryForValidationResults = (name: string, resultsOrNone?: ValidationResult[]) => {\n    const results = resultsOrNone || [];\n\n    const summary = results.reduce((partialSummary: {[key: string]: number}, result: ValidationResult) => {\n        if (!partialSummary[result.code]) {\n            partialSummary[result.code] = 0;\n        }\n\n        partialSummary[result.code] += 1;\n\n        return partialSummary;\n    }, {});\n\n    console.log(`${results.length} ${name}(s)`);\n    _.each(summary, (count, resultCode) => console.log(`\\t${resultCode}: ${count}`));\n};\n\nconst displaySummary = (result: ValidationOutcome, depth: number) => {\n    if (result.failureReason) {\n        console.log(result.failureReason);\n    }\n    displaySummaryForValidationResults('error', result.errors);\n    displaySummaryForValidationResults('warning', result.warnings);\n\n    if (result.warnings.length > 0 || result.errors.length > 0) {\n        console.log(`${util.inspect({warnings: result.warnings, errors: result.errors}, {depth})}\\n`);\n    }\n};\n\nconst logErrorAndExitProcess = (error: Error) => {\n    console.log(error.stack);\n    process.exitCode = 1;\n};\n\nprogram\n    .version(packageJson.version)\n    .arguments('<swagger> <mock>')\n    .option('-p, --provider [string]', 'The name of the provider in the pact broker')\n    .option('-t, --tag [string]', 'The tag to filter pacts retrieved from the pact broker')\n    .option('-u, --user [USERNAME:PASSWORD]', 'The basic auth username and password to access the pact broker (env - PACT_BROKER_USERNAME:PACT_BROKER_PASSWORD)')\n    .option('-b, --token [string]', 'The bearer token to access the pact broker (env - PACT_BROKER_TOKEN)')\n    .option('-a, --analyticsUrl [string]', 'The url to send analytics events to as a http post')\n    .option('-o, --outputDepth [integer]', 'Specifies the number of times to recurse ' +\n    'while formatting the output objects. ' +\n    'This is useful in case of large complicated objects or schemas.', parseInt, 4)\n    .option('-A, --additionalPropertiesInResponse [boolean]', 'allow additional properties in response bodies, default false')\n    .option('-R, --requiredPropertiesInResponse [boolean]', 'allows required properties in response bodies, default false')\n    .option('--publish', 'Allows publication of verification result to pact broker, default false')\n    .option('--providerApplicationVersion [string]', 'Version of provider, used when publishing result to broker')\n    .option('--providerBranch [string]', 'Branch of provider, used when publishing result to broker')\n    .option('--providerTags [string]', 'Tags of provider, used when publishing result to broker, comma seperated')\n    .option('--buildUrl [string]', 'Url to build/pipeline, used when publishing result to broker')\n    .description(\n`Confirms the swagger spec and mock are compatible with each other.\n\nBasic Usage:\nThe <swagger> and <mock> arguments should paths to the json files or urls to the json files.\n\nSupported Mock Formats:\nPact\n\nPact Broker:\nFor providers using the pact broker the <mock> argument should be the url to the root of the\npact broker and the provider name should be passed using the --provider option. This will\nautomatically find the latest versions of the consumer pact file(s) uploaded to the broker for\nthe specified provider name. The <swagger> argument should be the path or url to the swagger\njson file. Optionally, pass a --tag option alongside a --provider option to filter the retrieved\npacts from the broker by Pact Broker version tags. Pass the --publish flag together with\n--providerApplicationVersion to publish the result to the pact broker.\n\nIf the pact broker has basic auth enabled, pass a --user option with username and password joined by a colon\n(i.e. THE_USERNAME:THE_PASSWORD) to access the pact broker resources.\n\nIf the pact broker has bearer token auth enabled, pass a --token option along with the token to access the pact broker resources.\n\nYou can also set the following environment variables\n\n- Basic Auth\n  - PACT_BROKER_USERNAME\n  - PACT_BROKER_PASSWORD\n- Bearer Auth\n  - PACT_BROKER_TOKEN\n\nNote: command line options will take precedence over environment variables.\n`\n    )\n    .action(async (swagger, mock, options) => {\n        try {\n            if (\n                options.user == undefined &&\n                process.env.PACT_BROKER_USERNAME != undefined &&\n                process.env.PACT_BROKER_PASSWORD != undefined\n            ) {\n                options.user = process.env.PACT_BROKER_USERNAME + ':' + process.env.PACT_BROKER_PASSWORD;\n            } else if (options.token == undefined && process.env.PACT_BROKER_TOKEN != undefined) {\n                options.token = process.env.PACT_BROKER_TOKEN;\n            }\n            const swaggerMockValidator = SwaggerMockValidatorFactory.create(options.user ?? options.token);\n\n            const result = await swaggerMockValidator.validate({\n                analyticsUrl: options.analyticsUrl,\n                mockPathOrUrl: mock,\n                providerName: options.provider,\n                specPathOrUrl: swagger,\n                tag: options.tag,\n                additionalPropertiesInResponse: options.additionalPropertiesInResponse,\n                requiredPropertiesInResponse: options.requiredPropertiesInResponse,\n                providerApplicationVersion: options.providerApplicationVersion,\n                providerBranch: options.providerBranch,\n                providerTags: options.providerTags,\n                buildUrl: options.buildUrl,\n                publish: options.publish\n            });\n\n            displaySummary(result, options.outputDepth);\n\n            if (!result.success) {\n                logErrorAndExitProcess(new Error(result.failureReason));\n            }\n        } catch (error) {\n            logErrorAndExitProcess(error);\n        }\n    })\n    .parse(process.argv);\n\nif (!program.args.length) {\n    program.help();\n}\n"],"names":["CommanderError","Error","constructor","exitCode","code","message","captureStackTrace","name","nestedError","undefined","InvalidArgumentError","error","require$$0","Argument","description","variadic","parseArg","defaultValue","defaultValueDescription","argChoices","required","_name","slice","length","_concatValue","value","previous","Array","isArray","concat","default","argParser","fn","choices","values","arg","includes","join","argRequired","argOptional","humanReadableArgName","nameOutput","argument","Help","helpWidth","sortSubcommands","sortOptions","showGlobalOptions","visibleCommands","cmd","commands","filter","_hidden","helpCommand","_getHelpCommand","push","sort","a","b","localeCompare","compareOptions","getSortKey","option","short","replace","long","visibleOptions","options","hidden","helpOption","_getHelpOption","removeShort","_findOption","removeLong","createOption","visibleGlobalOptions","globalOptions","ancestorCmd","parent","visibleArguments","_argsDescription","registeredArguments","forEach","find","subcommandTerm","args","map","_aliases","optionTerm","flags","argumentTerm","longestSubcommandTermLength","helper","reduce","max","command","Math","longestOptionTermLength","longestGlobalOptionTermLength","longestArgumentTermLength","commandUsage","cmdName","ancestorCmdNames","usage","commandDescription","subcommandDescription","summary","optionDescription","extraInfo","choice","JSON","stringify","showDefault","optional","isBoolean","presetArg","envVar","argumentDescription","extraDescripton","formatHelp","termWidth","padWidth","itemIndentWidth","itemSeparatorWidth","formatItem","term","fullText","padEnd","wrap","formatList","textArray","repeat","output","argumentList","optionList","globalOptionList","commandList","str","width","indent","minColumnWidth","indents","manualIndent","RegExp","match","columnWidth","leadingStr","columnText","indentString","zeroWidthSpace","breaks","regex","lines","line","i","trimEnd","help","Option","test","mandatory","optionFlags","splitOptionFlags","shortFlag","longFlag","negate","startsWith","conflictsWith","implied","preset","conflicts","names","implies","impliedOptionValues","newImplied","Object","assign","env","makeOptionMandatory","hideHelp","hide","attributeName","camelcase","is","DualOptions","positiveOptions","Map","negativeOptions","dualOptions","Set","set","key","has","add","valueFromOption","optionKey","get","negativeValue","split","word","toUpperCase","flagParts","shift","maxDistance","editDistance","abs","d","j","cost","min","suggestSimilar","candidates","from","searchingOptions","candidate","similar","bestDistance","minSimilarity","distance","similarity","suggestSimilar_1","EventEmitter","childProcess","require$$1","path","require$$2","fs","require$$3","process","require$$4","require$$5","require$$6","require$$7","require$$8","require$$9","Command","_allowUnknownOption","_allowExcessArguments","_args","rawArgs","processedArgs","_scriptPath","_optionValues","_optionValueSources","_storeOptionsAsProperties","_actionHandler","_executableHandler","_executableFile","_executableDir","_defaultCommandName","_exitCallback","_combineFlagAndOptionalValue","_description","_summary","_enablePositionalOptions","_passThroughOptions","_lifeCycleHooks","_showHelpAfterError","_showSuggestionAfterError","_outputConfiguration","writeOut","stdout","write","writeErr","stderr","getOutHelpWidth","isTTY","columns","getErrHelpWidth","outputError","_helpOption","_addImplicitHelpCommand","_helpCommand","_helpConfiguration","copyInheritedSettings","sourceCommand","_getCommandAndAncestors","result","nameAndArgs","actionOptsOrExecDesc","execOpts","desc","opts","createCommand","isDefault","noHelp","executableFile","arguments","_registerCommand","createHelp","configureHelp","configuration","configureOutput","showHelpAfterError","displayHelp","showSuggestionAfterError","displaySuggestion","addCommand","_checkForBrokenPassThrough","createArgument","addArgument","trim","detail","previousArgument","enableOrNameAndArgs","helpName","helpArgs","helpDescription","addHelpCommand","deprecatedDescription","hasImplicitHelpCommand","_findCommand","hook","event","listener","allowedValues","exitOverride","err","_exit","exit","action","expectedArgsCount","actionArgs","apply","_callParseArg","target","invalidArgumentMessage","_registerOption","matchingOption","matchingFlag","knownBy","aliases","alreadyUsed","existingCmd","newCmd","addOption","oname","positiveLongFlag","setOptionValueWithSource","handleOptionValue","val","invalidValueMessage","valueSource","oldValue","getOptionValue","on","_optionEx","config","def","m","exec","requiredOption","combineFlagAndOptionalValue","combine","allowUnknownOption","allowUnknown","allowExcessArguments","allowExcess","enablePositionalOptions","positional","passThroughOptions","passThrough","storeOptionsAsProperties","storeAsProperties","keys","setOptionValue","source","getOptionValueSource","getOptionValueSourceWithGlobals","_prepareUserArgs","argv","parseOptions","versions","electron","execArgv","userArgs","defaultApp","nameFromFilename","parse","_parseCommand","parseAsync","_executeSubCommand","subcommand","launchWithNode","sourceExt","findFile","baseDir","baseName","localBin","resolve","existsSync","extname","foundExt","ext","_checkForMissingMandatoryOptions","_checkForConflictingOptions","executableDir","resolvedScriptPath","realpathSync","dirname","localFile","legacyName","basename","proc","platform","unshift","incrementNodeInspectorPort","spawn","stdio","execPath","killed","signals","signal","kill","exitCallback","executableDirMessage","executableMissing","wrappedError","runningCommand","_dispatchSubcommand","commandName","operands","unknown","subCommand","promiseChain","_chainOrCallSubCommandHook","_chainOrCall","_dispatchHelpCommand","subcommandName","_checkNumberOfArguments","missingArgument","_excessArguments","_processArguments","myParseArg","parsedValue","declaredArg","index","processed","v","promise","then","_chainOrCallHooks","hooks","reverse","hookedCommand","callback","hookDetail","parsed","_parseOptionsEnv","_parseOptionsImplied","_outputHelpIfRequested","checkForUnknownOptions","unknownOption","commandEvent","emit","listenerCount","unknownCommand","anOption","missingMandatoryOptionValue","_checkForConflictingLocalOptions","definedNonDefaultOptions","optionsWithConflicting","conflictingAndDefined","defined","_conflictingOption","dest","maybeOption","activeVariadicOption","optionMissingArgument","indexOf","len","_versionOptionName","_version","optsWithGlobals","combinedOptions","errorOptions","outputHelp","dualHelper","hasCustomOptionValue","impliedKey","conflictingOption","findBestOptionFromValue","optionValue","negativeOption","positiveOption","getErrorMessage","bestOption","flag","suggestion","candidateFlags","moreFlags","receivedArgs","expected","s","forSubcommand","unknownName","candidateNames","alias","version","versionOption","argsDescription","matchingCommand","_usage","filename","helpInformation","contextOptions","_getHelpContext","context","deprecatedCallback","Buffer","isBuffer","addHelpOption","addHelpText","position","text","helpEvent","helpStr","helpRequested","debugOption","debugHost","debugPort","parseInt","commander","program","InvalidOptionArgumentError","displaySummaryForValidationResults","resultsOrNone","results","partialSummary","console","log","_","each","count","resultCode","displaySummary","depth","failureReason","errors","warnings","util","inspect","logErrorAndExitProcess","stack","packageJson","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","swagger","mock","_options$user","swaggerMockValidator","_callee$","_context","prev","next","user","PACT_BROKER_USERNAME","PACT_BROKER_PASSWORD","token","PACT_BROKER_TOKEN","SwaggerMockValidatorFactory","create","validate","analyticsUrl","mockPathOrUrl","providerName","provider","specPathOrUrl","tag","additionalPropertiesInResponse","requiredPropertiesInResponse","providerApplicationVersion","providerBranch","providerTags","buildUrl","publish","sent","outputDepth","success","t0","stop","_x","_x2","_x3"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7]}